/*! @name videojs-overlay @version 3.1.0 @license Apache-2.0 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("video.js")):"function"==typeof define&&define.amd?define(["video.js"],e):(t="undefined"!=typeof globalThis?globalThis:t||self).videojsOverlay=e(t.videojs)}(this,(function(t){"use strict";function e(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var n=e(t);const s={align:"top-left",class:"",content:"This overlay will show up while the video is playing",debug:!1,showBackground:!0,attachToControlBar:!1,overlays:[{start:"playing",end:"paused"}]},i=n.default.getComponent("Component"),o=n.default.dom||n.default,r=n.default.registerPlugin||n.default.plugin,h=t=>"number"==typeof t&&t==t,a=t=>"string"==typeof t&&/^\S+$/.test(t);class d extends i{constructor(t,e){super(t,e),["start","end"].forEach((t=>{const e=this.options_[t];if(h(e))this[t+"Event_"]="timeupdate";else if(a(e))this[t+"Event_"]=e;else if("start"===t)throw new Error('invalid "start" option; expected number or string')})),["endListener_","rewindListener_","startListener_"].forEach((t=>{this[t]=e=>d.prototype[t].call(this,e)})),"timeupdate"===this.startEvent_&&this.on(t,"timeupdate",this.rewindListener_),this.debug(`created, listening to "${this.startEvent_}" for "start" and "${this.endEvent_||"nothing"}" for "end"`),this.hide()}createEl(){const t=this.options_,e=t.content,n=t.showBackground?"vjs-overlay-background":"vjs-overlay-no-background",s=o.createEl("div",{className:`\n        vjs-overlay\n        vjs-overlay-${t.align}\n        ${t.class}\n        ${n}\n        vjs-hidden\n      `});return"string"==typeof e?s.innerHTML=e:e instanceof window.DocumentFragment?s.appendChild(e):o.appendContent(s,e),s}debug(...t){if(!this.options_.debug)return;const e=n.default.log;let s=e;e.hasOwnProperty(t[0])&&"function"==typeof e[t[0]]&&(s=e[t.shift()]),s(`overlay#${this.id()}: `,...t)}hide(){return super.hide(),this.debug("hidden"),this.debug(`bound \`startListener_\` to "${this.startEvent_}"`),this.endEvent_&&(this.debug(`unbound \`endListener_\` from "${this.endEvent_}"`),this.off(this.player(),this.endEvent_,this.endListener_)),this.on(this.player(),this.startEvent_,this.startListener_),this}shouldHide_(t,e){const n=this.options_.end;return h(n)?t>=n:n===e}show(){return super.show(),this.off(this.player(),this.startEvent_,this.startListener_),this.debug("shown"),this.debug(`unbound \`startListener_\` from "${this.startEvent_}"`),this.endEvent_&&(this.debug(`bound \`endListener_\` to "${this.endEvent_}"`),this.on(this.player(),this.endEvent_,this.endListener_)),this}shouldShow_(t,e){const n=this.options_.start,s=this.options_.end;return h(n)?h(s)?t>=n&&t<s:this.hasShownSinceSeek_?Math.floor(t)===n:(this.hasShownSinceSeek_=!0,t>=n):n===e}startListener_(t){const e=this.player().currentTime();this.shouldShow_(e,t.type)&&this.show()}endListener_(t){const e=this.player().currentTime();this.shouldHide_(e,t.type)&&this.hide()}rewindListener_(t){const e=this.player().currentTime(),n=this.previousTime_,s=this.options_.start,i=this.options_.end;e<n&&(this.debug("rewind detected"),h(i)&&!this.shouldShow_(e)?(this.debug(`hiding; ${i} is an integer and overlay should not show at this time`),this.hasShownSinceSeek_=!1,this.hide()):a(i)&&e<s&&(this.debug(`hiding; show point (${s}) is before now (${e}) and end point (${i}) is an event`),this.hasShownSinceSeek_=!1,this.hide())),this.previousTime_=e}}n.default.registerComponent("Overlay",d);const l=function(t){const e=this,i=n.default.mergeOptions(s,t);Array.isArray(this.overlays_)&&this.overlays_.forEach((t=>{this.removeChild(t),this.controlBar&&this.controlBar.removeChild(t),t.dispose()}));const o=i.overlays;delete i.overlays;const r=t=>t.map((t=>{const e=n.default.mergeOptions(i,t),s="string"==typeof e.attachToControlBar||!0===e.attachToControlBar;if(!this.controls()||!this.controlBar)return this.addChild("overlay",e);if(s&&-1!==e.align.indexOf("bottom")){let t=this.controlBar.children()[0];if(void 0!==this.controlBar.getChild(e.attachToControlBar)&&(t=this.controlBar.getChild(e.attachToControlBar)),t){const n=this.controlBar.children().indexOf(t);return this.controlBar.addChild("overlay",e,n)}}const o=this.addChild("overlay",e);return this.el().insertBefore(o.el(),this.controlBar.el()),o}));return this.overlays_=r(o),{add:function(t){Array.isArray(t)||(t=[t]);const n=r(t);return e.overlays_=e.overlays_.concat(n),n},remove:function(t){const n=e.overlays_.indexOf(t);-1!==n?(t.el().parentNode.removeChild(t.el()),e.overlays_.splice(n,1)):e.log.warn("overlay does not exist and cannot be removed")},get:function(){return e.overlays_}}};return l.VERSION="3.1.0",r("overlay",l),l}));
