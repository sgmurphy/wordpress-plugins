/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/blocks/molliePaymentMethod.js":
/*!****************************************************!*\
  !*** ./resources/js/blocks/molliePaymentMethod.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var onSubmitLocal;
var activePaymentMethodLocal;
var cachedAvailableGateways;
var creditCardSelected = new Event("mollie_creditcard_component_selected", {
  bubbles: true
});
var MollieComponent = function MollieComponent(props) {
  var onSubmit = props.onSubmit,
    activePaymentMethod = props.activePaymentMethod,
    billing = props.billing,
    item = props.item,
    useEffect = props.useEffect,
    ajaxUrl = props.ajaxUrl,
    jQuery = props.jQuery,
    emitResponse = props.emitResponse,
    eventRegistration = props.eventRegistration,
    requiredFields = props.requiredFields,
    shippingData = props.shippingData,
    isCompanyFieldVisible = props.isCompanyFieldVisible,
    isPhoneFieldVisible = props.isPhoneFieldVisible;
  var responseTypes = emitResponse.responseTypes;
  var onPaymentSetup = eventRegistration.onPaymentSetup,
    onCheckoutValidation = eventRegistration.onCheckoutValidation;
  var _wp$element$useState = wp.element.useState(''),
    _wp$element$useState2 = _slicedToArray(_wp$element$useState, 2),
    selectedIssuer = _wp$element$useState2[0],
    selectIssuer = _wp$element$useState2[1];
  var _wp$element$useState3 = wp.element.useState(''),
    _wp$element$useState4 = _slicedToArray(_wp$element$useState3, 2),
    inputPhone = _wp$element$useState4[0],
    selectPhone = _wp$element$useState4[1];
  var _wp$element$useState5 = wp.element.useState(''),
    _wp$element$useState6 = _slicedToArray(_wp$element$useState5, 2),
    inputBirthdate = _wp$element$useState6[0],
    selectBirthdate = _wp$element$useState6[1];
  var _wp$element$useState7 = wp.element.useState(''),
    _wp$element$useState8 = _slicedToArray(_wp$element$useState7, 2),
    inputCompany = _wp$element$useState8[0],
    selectCompany = _wp$element$useState8[1];
  var issuerKey = 'mollie-payments-for-woocommerce_issuer_' + activePaymentMethod;
  var companyNameString = requiredFields.companyNameString,
    phoneString = requiredFields.phoneString;
  function getPhoneField() {
    var shippingPhone = document.getElementById('shipping-phone');
    var billingPhone = document.getElementById('billing-phone');
    return billingPhone || shippingPhone;
  }
  function updateTotalLabel(newTotal, currency) {
    var feeText = newTotal + " " + currency;
    var totalSpan = "<span class='wc-block-formatted-money-amount wc-block-components-formatted-money-amount wc-block-components-totals-item__value'>" + feeText + "</span>";
    var total = jQuery('.wc-block-components-totals-footer-item .wc-block-formatted-money-amount:first');
    total.replaceWith(totalSpan);
  }
  function updateTaxesLabel(newTotal, currency) {
    var feeText = newTotal + " " + currency;
    var totalSpan = "<span class='wc-block-formatted-money-amount wc-block-components-formatted-money-amount wc-block-components-totals-item__value'>" + feeText + "</span>";
    var total = jQuery('div.wp-block-woocommerce-checkout-order-summary-taxes-block.wc-block-components-totals-wrapper > div > span.wc-block-formatted-money-amount.wc-block-components-formatted-money-amount.wc-block-components-totals-item__value:first');
    total.replaceWith(totalSpan);
  }
  function hideFee(fee, response) {
    fee === null || fee === void 0 || fee.hide();
    updateTotalLabel(response.data.newTotal.toFixed(2).replace('.', ','), response.data.currency);
    updateTaxesLabel(response.data.totalTax.toFixed(2).replace('.', ','), response.data.currency);
  }
  function feeMarkup(response) {
    return "<div class='wc-block-components-totals-item wc-block-components-totals-fees'>" + "<span class='wc-block-components-totals-item__label'>" + response.data.name + "</span>" + "<span class='wc-block-formatted-money-amount wc-block-components-formatted-money-amount wc-block-components-totals-item__value'>" + response.data.amount.toFixed(2).replace('.', ',') + " " + response.data.currency + "</span>" + "<div class='wc-block-components-totals-item__description'>" + "</div>" + "</div>";
  }
  function replaceFee(fee, newFee, response) {
    fee.replaceWith(newFee);
    updateTotalLabel(response.data.newTotal.toFixed(2).replace('.', ','), response.data.currency);
    updateTaxesLabel(response.data.totalTax.toFixed(2).replace('.', ','), response.data.currency);
  }
  function insertNewFee(newFee, response) {
    var subtotal = jQuery('.wc-block-components-totals-item:first');
    subtotal.after(newFee);
    updateTotalLabel(response.data.newTotal.toFixed(2).replace('.', ','), response.data.currency);
    updateTaxesLabel(response.data.totalTax.toFixed(2).replace('.', ','), response.data.currency);
  }
  function handleFees(response) {
    var fee = jQuery('.wc-block-components-totals-fees');
    if (!response.data.amount) {
      hideFee(fee, response);
      return;
    }
    var newFee = feeMarkup(response);
    if (fee.length) {
      replaceFee(fee, newFee, response);
      return;
    }
    insertNewFee(newFee, response);
  }
  useEffect(function () {
    if (activePaymentMethodLocal !== activePaymentMethod && activePaymentMethod === 'mollie_wc_gateway_creditcard') {
      document.documentElement.dispatchEvent(creditCardSelected);
    }
    activePaymentMethodLocal = activePaymentMethod;
    jQuery.ajax({
      url: ajaxUrl,
      method: 'POST',
      data: {
        action: 'mollie_checkout_blocks_surchage',
        method: activePaymentMethod
      },
      complete: function complete(jqXHR, textStatus) {},
      success: function success(response, textStatus, jqXHR) {
        handleFees(response);
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        console.warn(textStatus, errorThrown);
      }
    });
  }, [activePaymentMethod, billing.cartTotal]);
  useEffect(function () {
    var onProcessingPayment = function onProcessingPayment() {
      var tokenVal = jQuery('.mollie-components > input').val();
      return {
        type: responseTypes.SUCCESS,
        meta: {
          paymentMethodData: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({
            payment_method: activePaymentMethod,
            payment_method_title: item.title
          }, issuerKey, selectedIssuer), "billing_phone", inputPhone), "billing_company", inputCompany), "billing_birthdate", inputBirthdate), "cardToken", tokenVal)
        }
      };
    };
    var unsubscribePaymentProcessing = onPaymentSetup(onProcessingPayment);
    return function () {
      unsubscribePaymentProcessing();
    };
  }, [selectedIssuer, onPaymentSetup, inputPhone, inputCompany, inputBirthdate]);
  useEffect(function () {
    var companyLabel = jQuery('div.wc-block-components-text-input.wc-block-components-address-form__company > label');
    if (companyLabel.length === 0) {
      return;
    }
    if (activePaymentMethod === 'mollie_wc_gateway_billie') {
      var message = item.companyPlaceholder;
      companyLabel.replaceWith('<label htmlFor="shipping-company">' + message + '</label>');
    } else {
      if (companyNameString !== false) {
        companyLabel.replaceWith('<label htmlFor="shipping-company">' + companyNameString + '</label>');
      }
    }
    var isCompanyEmpty = billing.billingData.company === '' && shippingData.shippingAddress.company === '' && inputCompany === '';
    var unsubscribeProcessing = onCheckoutValidation(function () {
      if (activePaymentMethod === 'mollie_wc_gateway_billie' && isCompanyEmpty) {
        return {
          errorMessage: item.errorMessage
        };
      }
    });
    return function () {
      unsubscribeProcessing();
    };
  }, [activePaymentMethod, onCheckoutValidation, billing.billingData, item, companyNameString, inputCompany]);
  useEffect(function () {
    var _getPhoneField$labels, _getPhoneField;
    var phoneLabel = (_getPhoneField$labels = (_getPhoneField = getPhoneField()) === null || _getPhoneField === void 0 || (_getPhoneField = _getPhoneField.labels) === null || _getPhoneField === void 0 ? void 0 : _getPhoneField[0]) !== null && _getPhoneField$labels !== void 0 ? _getPhoneField$labels : null;
    if (!phoneLabel || phoneLabel.length === 0) {
      return;
    }
    if (activePaymentMethod === 'mollie_wc_gateway_in3') {
      phoneLabel.innerText = item.phonePlaceholder;
    } else {
      if (phoneString !== false) {
        phoneLabel.innerText = phoneString;
      }
    }
    var isPhoneEmpty = billing.billingData.phone === '' && shippingData.shippingAddress.phone === '' && inputPhone === '';
    var isBirthdateValid = inputBirthdate === '';
    var today = new Date();
    var birthdate = new Date(inputBirthdate);
    if (birthdate > today) {
      isBirthdateValid = false;
    }
    var unsubscribeProcessing = onCheckoutValidation(function () {
      if (activePaymentMethod === 'mollie_wc_gateway_in3' && (isPhoneEmpty || isBirthdateValid)) {
        return {
          errorMessage: item.errorMessage
        };
      }
    });
    return function () {
      unsubscribeProcessing();
    };
  }, [activePaymentMethod, onCheckoutValidation, billing.billingData, shippingData.shippingAddress, item, phoneString, inputBirthdate, inputPhone]);
  onSubmitLocal = onSubmit;
  var updateIssuer = function updateIssuer(changeEvent) {
    selectIssuer(changeEvent.target.value);
  };
  var updateCompany = function updateCompany(changeEvent) {
    selectCompany(changeEvent.target.value);
  };
  var updatePhone = function updatePhone(changeEvent) {
    selectPhone(changeEvent.target.value);
  };
  var updateBirthdate = function updateBirthdate(changeEvent) {
    selectBirthdate(changeEvent.target.value);
  };
  if (item.issuers && item.name !== "mollie_wc_gateway_creditcard") {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, item.content), /*#__PURE__*/React.createElement("select", {
      name: issuerKey,
      dangerouslySetInnerHTML: {
        __html: item.issuers
      },
      value: selectedIssuer,
      onChange: updateIssuer
    }));
  }
  if (item.name === "mollie_wc_gateway_creditcard") {
    return /*#__PURE__*/React.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: item.content
      }
    });
  }
  function fieldMarkup(id, fieldType, label, action, value) {
    var className = "wc-block-components-text-input wc-block-components-address-form__" + id;
    return /*#__PURE__*/React.createElement("div", {
      class: "custom-input"
    }, /*#__PURE__*/React.createElement("label", {
      htmlFor: id,
      dangerouslySetInnerHTML: {
        __html: label
      }
    }), /*#__PURE__*/React.createElement("input", {
      type: fieldType,
      name: id,
      id: id,
      value: value,
      onChange: action
    }));
  }
  if (item.name === "mollie_wc_gateway_billie") {
    if (isCompanyFieldVisible) {
      return;
    }
    var companyField = item.companyPlaceholder ? item.companyPlaceholder : "Company name";
    return fieldMarkup("billing-company", "text", companyField, updateCompany, inputCompany);
  }
  if (item.name === "mollie_wc_gateway_in3") {
    var fields = [];
    var birthdateField = item.birthdatePlaceholder ? item.birthdatePlaceholder : "Birthdate";
    fields.push(fieldMarkup("billing-birthdate", "date", birthdateField, updateBirthdate, inputBirthdate));
    if (isPhoneFieldVisible === false) {
      var phoneField = item.phonePlaceholder ? item.phonePlaceholder : "Phone";
      fields.push(fieldMarkup("billing-phone-in3", "tel", phoneField, updatePhone, inputPhone));
    }
    return /*#__PURE__*/React.createElement(React.Fragment, null, fields);
  }
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, item.content));
};
var molliePaymentMethod = function molliePaymentMethod(useEffect, ajaxUrl, filters, gatewayData, availableGateways, item, jQuery, requiredFields, isCompanyFieldVisible, isPhoneFieldVisible) {
  var billingCountry = filters.billingCountry;
  var cartTotal = filters.cartTotal;
  cachedAvailableGateways = availableGateways;
  var changedBillingCountry = filters.billingCountry;
  document.addEventListener('mollie_components_ready_to_submit', function () {
    onSubmitLocal();
  });
  return {
    name: item.name,
    label: /*#__PURE__*/React.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: item.label
      }
    }),
    content: /*#__PURE__*/React.createElement(MollieComponent, {
      item: item,
      useEffect: useEffect,
      ajaxUrl: ajaxUrl,
      jQuery: jQuery,
      requiredFields: requiredFields,
      isCompanyFieldVisible: isCompanyFieldVisible,
      isPhoneFieldVisible: isPhoneFieldVisible
    }),
    edit: /*#__PURE__*/React.createElement("div", null, item.edit),
    paymentMethodId: item.paymentMethodId,
    canMakePayment: function canMakePayment(_ref) {
      var cartTotals = _ref.cartTotals,
        billingData = _ref.billingData;
      if (!_.isEmpty(item.allowedCountries) && !item.allowedCountries.includes(billingData.country)) {
        return false;
      }
      if (cartTotals <= 0) {
        return true;
      }
      cartTotal = cartTotals === null || cartTotals === void 0 ? void 0 : cartTotals.total_price;
      if (billingData !== null && billingData !== void 0 && billingData.country && billingData.country !== '') {
        billingCountry = billingData === null || billingData === void 0 ? void 0 : billingData.country;
      }
      var currencyCode = cartTotals === null || cartTotals === void 0 ? void 0 : cartTotals.currency_code;
      var currentFilterKey = currencyCode + "-" + filters.paymentLocale + "-" + billingCountry;
      function creditcardSelectedEvent() {
        if (item.name === "mollie_wc_gateway_creditcard") {
          document.documentElement.dispatchEvent(creditCardSelected);
        }
      }
      if (billingCountry !== changedBillingCountry) {
        changedBillingCountry = billingCountry;
        if (!cachedAvailableGateways.hasOwnProperty(currentFilterKey)) {
          jQuery.ajax({
            url: ajaxUrl,
            method: 'POST',
            data: {
              action: 'mollie_checkout_blocks_canmakepayment',
              currentGateway: item,
              currency: currencyCode,
              billingCountry: billingCountry,
              cartTotal: cartTotal,
              paymentLocale: filters.paymentLocale
            },
            complete: function complete(jqXHR, textStatus) {},
            success: function success(response, textStatus, jqXHR) {
              cachedAvailableGateways = _objectSpread(_objectSpread({}, cachedAvailableGateways), response.data);
              if (!cachedAvailableGateways.hasOwnProperty(currentFilterKey)) {
                return false;
              }
              return cachedAvailableGateways[currentFilterKey].hasOwnProperty(item.name);
            },
            error: function error(jqXHR, textStatus, errorThrown) {
              console.warn(textStatus, errorThrown);
            }
          });
        }
      }
      if (!cachedAvailableGateways.hasOwnProperty(currentFilterKey)) {
        return false;
      }
      creditcardSelectedEvent();
      return cachedAvailableGateways[currentFilterKey].hasOwnProperty(item.name);
    },
    ariaLabel: item.ariaLabel,
    supports: {
      features: item.supports
    }
  };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (molliePaymentMethod);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!******************************************!*\
  !*** ./resources/js/mollieBlockIndex.js ***!
  \******************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _blocks_molliePaymentMethod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blocks/molliePaymentMethod */ "./resources/js/blocks/molliePaymentMethod.js");

(function (_ref) {
  var mollieBlockData = _ref.mollieBlockData,
    wc = _ref.wc,
    _ = _ref._,
    jQuery = _ref.jQuery;
  if (_.isEmpty(mollieBlockData)) {
    return;
  }
  window.onload = function (event) {
    var _wp;
    var registerPaymentMethod = wc.wcBlocksRegistry.registerPaymentMethod;
    var _wc$wcSettings$allSet = wc.wcSettings.allSettings,
      checkoutData = _wc$wcSettings$allSet.checkoutData,
      defaultFields = _wc$wcSettings$allSet.defaultFields;
    var billing_address = checkoutData.billing_address,
      shipping_address = checkoutData.shipping_address;
    var _mollieBlockData$gate = mollieBlockData.gatewayData,
      ajaxUrl = _mollieBlockData$gate.ajaxUrl,
      filters = _mollieBlockData$gate.filters,
      gatewayData = _mollieBlockData$gate.gatewayData,
      availableGateways = _mollieBlockData$gate.availableGateways;
    var useEffect = wp.element.useEffect;
    var isAppleSession = typeof window.ApplePaySession === "function";
    var isBlockEditor = !!((_wp = wp) !== null && _wp !== void 0 && _wp.blockEditor);
    function getCompanyField() {
      var _shipping_address$com, _billing_address$comp;
      var shippingCompany = (_shipping_address$com = shipping_address.company) !== null && _shipping_address$com !== void 0 ? _shipping_address$com : false;
      var billingCompany = (_billing_address$comp = billing_address.company) !== null && _billing_address$comp !== void 0 ? _billing_address$comp : false;
      return shippingCompany ? shippingCompany : billingCompany;
    }
    function getPhoneField() {
      var phoneFieldDataset = document.querySelector('[data-show-phone-field]');
      if (!phoneFieldDataset) {
        return true;
      }
      return phoneFieldDataset.dataset.showPhoneField !== "false";
    }
    var isCompanyFieldVisible = getCompanyField();
    var companyNameString = defaultFields.company.label;
    var isPhoneFieldVisible = getPhoneField();
    var phoneString = defaultFields.phone.label;
    var requiredFields = {
      'companyNameString': companyNameString,
      'phoneString': phoneString
    };
    gatewayData.forEach(function (item) {
      var register = function register() {
        return registerPaymentMethod((0,_blocks_molliePaymentMethod__WEBPACK_IMPORTED_MODULE_0__["default"])(useEffect, ajaxUrl, filters, gatewayData, availableGateways, item, jQuery, requiredFields, isCompanyFieldVisible, isPhoneFieldVisible));
      };
      if (item.name === 'mollie_wc_gateway_applepay' && !isBlockEditor) {
        if (isAppleSession && window.ApplePaySession.canMakePayments()) {
          register();
        }
        return;
      }
      register();
    });
  };
})(window, wc);
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,