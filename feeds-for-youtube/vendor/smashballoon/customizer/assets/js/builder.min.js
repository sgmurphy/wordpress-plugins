/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@wordpress/hooks/build-module/createAddHook.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createAddHook.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validateNamespace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validateNamespace.js */ "./node_modules/@wordpress/hooks/build-module/validateNamespace.js");
/* harmony import */ var _validateHookName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validateHookName.js */ "./node_modules/@wordpress/hooks/build-module/validateHookName.js");
/**
 * Internal dependencies
 */



/**
 * @callback AddHook
 *
 * Adds the hook to the appropriate hooks container.
 *
 * @param {string}               hookName      Name of hook to add
 * @param {string}               namespace     The unique namespace identifying the callback in the form `vendor/plugin/function`.
 * @param {import('.').Callback} callback      Function to call when the hook is run
 * @param {number}               [priority=10] Priority of this hook
 */

/**
 * Returns a function which, when invoked, will add a hook.
 *
 * @param {import('.').Hooks}    hooks    Hooks instance.
 * @param {import('.').StoreKey} storeKey
 *
 * @return {AddHook} Function that adds a new hook.
 */
function createAddHook(hooks, storeKey) {
  return function addHook(hookName, namespace, callback, priority = 10) {
    const hooksStore = hooks[storeKey];
    if (!(0,_validateHookName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(hookName)) {
      return;
    }
    if (!(0,_validateNamespace_js__WEBPACK_IMPORTED_MODULE_0__["default"])(namespace)) {
      return;
    }
    if ('function' !== typeof callback) {
      // eslint-disable-next-line no-console
      console.error('The hook callback must be a function.');
      return;
    }

    // Validate numeric priority
    if ('number' !== typeof priority) {
      // eslint-disable-next-line no-console
      console.error('If specified, the hook priority must be a number.');
      return;
    }
    const handler = {
      callback,
      priority,
      namespace
    };
    if (hooksStore[hookName]) {
      // Find the correct insert index of the new hook.
      const handlers = hooksStore[hookName].handlers;

      /** @type {number} */
      let i;
      for (i = handlers.length; i > 0; i--) {
        if (priority >= handlers[i - 1].priority) {
          break;
        }
      }
      if (i === handlers.length) {
        // If append, operate via direct assignment.
        handlers[i] = handler;
      } else {
        // Otherwise, insert before index via splice.
        handlers.splice(i, 0, handler);
      }

      // We may also be currently executing this hook.  If the callback
      // we're adding would come after the current callback, there's no
      // problem; otherwise we need to increase the execution index of
      // any other runs by 1 to account for the added element.
      hooksStore.__current.forEach(hookInfo => {
        if (hookInfo.name === hookName && hookInfo.currentIndex >= i) {
          hookInfo.currentIndex++;
        }
      });
    } else {
      // This is the first hook of its type.
      hooksStore[hookName] = {
        handlers: [handler],
        runs: 0
      };
    }
    if (hookName !== 'hookAdded') {
      hooks.doAction('hookAdded', hookName, namespace, callback, priority);
    }
  };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createAddHook);
//# sourceMappingURL=createAddHook.js.map

/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createCurrentHook.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createCurrentHook.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Returns a function which, when invoked, will return the name of the
 * currently running hook, or `null` if no hook of the given type is currently
 * running.
 *
 * @param {import('.').Hooks}    hooks    Hooks instance.
 * @param {import('.').StoreKey} storeKey
 *
 * @return {() => string | null} Function that returns the current hook name or null.
 */
function createCurrentHook(hooks, storeKey) {
  return function currentHook() {
    var _hooksStore$__current;
    const hooksStore = hooks[storeKey];
    return (_hooksStore$__current = hooksStore.__current[hooksStore.__current.length - 1]?.name) !== null && _hooksStore$__current !== void 0 ? _hooksStore$__current : null;
  };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createCurrentHook);
//# sourceMappingURL=createCurrentHook.js.map

/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createDidHook.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createDidHook.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validateHookName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validateHookName.js */ "./node_modules/@wordpress/hooks/build-module/validateHookName.js");
/**
 * Internal dependencies
 */


/**
 * @callback DidHook
 *
 * Returns the number of times an action has been fired.
 *
 * @param {string} hookName The hook name to check.
 *
 * @return {number | undefined} The number of times the hook has run.
 */

/**
 * Returns a function which, when invoked, will return the number of times a
 * hook has been called.
 *
 * @param {import('.').Hooks}    hooks    Hooks instance.
 * @param {import('.').StoreKey} storeKey
 *
 * @return {DidHook} Function that returns a hook's call count.
 */
function createDidHook(hooks, storeKey) {
  return function didHook(hookName) {
    const hooksStore = hooks[storeKey];
    if (!(0,_validateHookName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(hookName)) {
      return;
    }
    return hooksStore[hookName] && hooksStore[hookName].runs ? hooksStore[hookName].runs : 0;
  };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createDidHook);
//# sourceMappingURL=createDidHook.js.map

/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createDoingHook.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createDoingHook.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @callback DoingHook
 * Returns whether a hook is currently being executed.
 *
 * @param {string} [hookName] The name of the hook to check for.  If
 *                            omitted, will check for any hook being executed.
 *
 * @return {boolean} Whether the hook is being executed.
 */

/**
 * Returns a function which, when invoked, will return whether a hook is
 * currently being executed.
 *
 * @param {import('.').Hooks}    hooks    Hooks instance.
 * @param {import('.').StoreKey} storeKey
 *
 * @return {DoingHook} Function that returns whether a hook is currently
 *                     being executed.
 */
function createDoingHook(hooks, storeKey) {
  return function doingHook(hookName) {
    const hooksStore = hooks[storeKey];

    // If the hookName was not passed, check for any current hook.
    if ('undefined' === typeof hookName) {
      return 'undefined' !== typeof hooksStore.__current[0];
    }

    // Return the __current hook.
    return hooksStore.__current[0] ? hookName === hooksStore.__current[0].name : false;
  };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createDoingHook);
//# sourceMappingURL=createDoingHook.js.map

/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createHasHook.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createHasHook.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @callback HasHook
 *
 * Returns whether any handlers are attached for the given hookName and optional namespace.
 *
 * @param {string} hookName    The name of the hook to check for.
 * @param {string} [namespace] Optional. The unique namespace identifying the callback
 *                             in the form `vendor/plugin/function`.
 *
 * @return {boolean} Whether there are handlers that are attached to the given hook.
 */
/**
 * Returns a function which, when invoked, will return whether any handlers are
 * attached to a particular hook.
 *
 * @param {import('.').Hooks}    hooks    Hooks instance.
 * @param {import('.').StoreKey} storeKey
 *
 * @return {HasHook} Function that returns whether any handlers are
 *                   attached to a particular hook and optional namespace.
 */
function createHasHook(hooks, storeKey) {
  return function hasHook(hookName, namespace) {
    const hooksStore = hooks[storeKey];

    // Use the namespace if provided.
    if ('undefined' !== typeof namespace) {
      return hookName in hooksStore && hooksStore[hookName].handlers.some(hook => hook.namespace === namespace);
    }
    return hookName in hooksStore;
  };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createHasHook);
//# sourceMappingURL=createHasHook.js.map

/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createHooks.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createHooks.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _Hooks: () => (/* binding */ _Hooks),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _createAddHook__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createAddHook */ "./node_modules/@wordpress/hooks/build-module/createAddHook.js");
/* harmony import */ var _createRemoveHook__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createRemoveHook */ "./node_modules/@wordpress/hooks/build-module/createRemoveHook.js");
/* harmony import */ var _createHasHook__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createHasHook */ "./node_modules/@wordpress/hooks/build-module/createHasHook.js");
/* harmony import */ var _createRunHook__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./createRunHook */ "./node_modules/@wordpress/hooks/build-module/createRunHook.js");
/* harmony import */ var _createCurrentHook__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./createCurrentHook */ "./node_modules/@wordpress/hooks/build-module/createCurrentHook.js");
/* harmony import */ var _createDoingHook__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./createDoingHook */ "./node_modules/@wordpress/hooks/build-module/createDoingHook.js");
/* harmony import */ var _createDidHook__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./createDidHook */ "./node_modules/@wordpress/hooks/build-module/createDidHook.js");
/**
 * Internal dependencies
 */








/**
 * Internal class for constructing hooks. Use `createHooks()` function
 *
 * Note, it is necessary to expose this class to make its type public.
 *
 * @private
 */
class _Hooks {
  constructor() {
    /** @type {import('.').Store} actions */
    this.actions = Object.create(null);
    this.actions.__current = [];

    /** @type {import('.').Store} filters */
    this.filters = Object.create(null);
    this.filters.__current = [];
    this.addAction = (0,_createAddHook__WEBPACK_IMPORTED_MODULE_0__["default"])(this, 'actions');
    this.addFilter = (0,_createAddHook__WEBPACK_IMPORTED_MODULE_0__["default"])(this, 'filters');
    this.removeAction = (0,_createRemoveHook__WEBPACK_IMPORTED_MODULE_1__["default"])(this, 'actions');
    this.removeFilter = (0,_createRemoveHook__WEBPACK_IMPORTED_MODULE_1__["default"])(this, 'filters');
    this.hasAction = (0,_createHasHook__WEBPACK_IMPORTED_MODULE_2__["default"])(this, 'actions');
    this.hasFilter = (0,_createHasHook__WEBPACK_IMPORTED_MODULE_2__["default"])(this, 'filters');
    this.removeAllActions = (0,_createRemoveHook__WEBPACK_IMPORTED_MODULE_1__["default"])(this, 'actions', true);
    this.removeAllFilters = (0,_createRemoveHook__WEBPACK_IMPORTED_MODULE_1__["default"])(this, 'filters', true);
    this.doAction = (0,_createRunHook__WEBPACK_IMPORTED_MODULE_3__["default"])(this, 'actions');
    this.applyFilters = (0,_createRunHook__WEBPACK_IMPORTED_MODULE_3__["default"])(this, 'filters', true);
    this.currentAction = (0,_createCurrentHook__WEBPACK_IMPORTED_MODULE_4__["default"])(this, 'actions');
    this.currentFilter = (0,_createCurrentHook__WEBPACK_IMPORTED_MODULE_4__["default"])(this, 'filters');
    this.doingAction = (0,_createDoingHook__WEBPACK_IMPORTED_MODULE_5__["default"])(this, 'actions');
    this.doingFilter = (0,_createDoingHook__WEBPACK_IMPORTED_MODULE_5__["default"])(this, 'filters');
    this.didAction = (0,_createDidHook__WEBPACK_IMPORTED_MODULE_6__["default"])(this, 'actions');
    this.didFilter = (0,_createDidHook__WEBPACK_IMPORTED_MODULE_6__["default"])(this, 'filters');
  }
}

/** @typedef {_Hooks} Hooks */

/**
 * Returns an instance of the hooks object.
 *
 * @return {Hooks} A Hooks instance.
 */
function createHooks() {
  return new _Hooks();
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createHooks);
//# sourceMappingURL=createHooks.js.map

/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createRemoveHook.js":
/*!************************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createRemoveHook.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validateNamespace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validateNamespace.js */ "./node_modules/@wordpress/hooks/build-module/validateNamespace.js");
/* harmony import */ var _validateHookName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validateHookName.js */ "./node_modules/@wordpress/hooks/build-module/validateHookName.js");
/**
 * Internal dependencies
 */



/**
 * @callback RemoveHook
 * Removes the specified callback (or all callbacks) from the hook with a given hookName
 * and namespace.
 *
 * @param {string} hookName  The name of the hook to modify.
 * @param {string} namespace The unique namespace identifying the callback in the
 *                           form `vendor/plugin/function`.
 *
 * @return {number | undefined} The number of callbacks removed.
 */

/**
 * Returns a function which, when invoked, will remove a specified hook or all
 * hooks by the given name.
 *
 * @param {import('.').Hooks}    hooks             Hooks instance.
 * @param {import('.').StoreKey} storeKey
 * @param {boolean}              [removeAll=false] Whether to remove all callbacks for a hookName,
 *                                                 without regard to namespace. Used to create
 *                                                 `removeAll*` functions.
 *
 * @return {RemoveHook} Function that removes hooks.
 */
function createRemoveHook(hooks, storeKey, removeAll = false) {
  return function removeHook(hookName, namespace) {
    const hooksStore = hooks[storeKey];
    if (!(0,_validateHookName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(hookName)) {
      return;
    }
    if (!removeAll && !(0,_validateNamespace_js__WEBPACK_IMPORTED_MODULE_0__["default"])(namespace)) {
      return;
    }

    // Bail if no hooks exist by this name.
    if (!hooksStore[hookName]) {
      return 0;
    }
    let handlersRemoved = 0;
    if (removeAll) {
      handlersRemoved = hooksStore[hookName].handlers.length;
      hooksStore[hookName] = {
        runs: hooksStore[hookName].runs,
        handlers: []
      };
    } else {
      // Try to find the specified callback to remove.
      const handlers = hooksStore[hookName].handlers;
      for (let i = handlers.length - 1; i >= 0; i--) {
        if (handlers[i].namespace === namespace) {
          handlers.splice(i, 1);
          handlersRemoved++;
          // This callback may also be part of a hook that is
          // currently executing.  If the callback we're removing
          // comes after the current callback, there's no problem;
          // otherwise we need to decrease the execution index of any
          // other runs by 1 to account for the removed element.
          hooksStore.__current.forEach(hookInfo => {
            if (hookInfo.name === hookName && hookInfo.currentIndex >= i) {
              hookInfo.currentIndex--;
            }
          });
        }
      }
    }
    if (hookName !== 'hookRemoved') {
      hooks.doAction('hookRemoved', hookName, namespace);
    }
    return handlersRemoved;
  };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createRemoveHook);
//# sourceMappingURL=createRemoveHook.js.map

/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/createRunHook.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/createRunHook.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Returns a function which, when invoked, will execute all callbacks
 * registered to a hook of the specified type, optionally returning the final
 * value of the call chain.
 *
 * @param {import('.').Hooks}    hooks                  Hooks instance.
 * @param {import('.').StoreKey} storeKey
 * @param {boolean}              [returnFirstArg=false] Whether each hook callback is expected to
 *                                                      return its first argument.
 *
 * @return {(hookName:string, ...args: unknown[]) => undefined|unknown} Function that runs hook callbacks.
 */
function createRunHook(hooks, storeKey, returnFirstArg = false) {
  return function runHooks(hookName, ...args) {
    const hooksStore = hooks[storeKey];
    if (!hooksStore[hookName]) {
      hooksStore[hookName] = {
        handlers: [],
        runs: 0
      };
    }
    hooksStore[hookName].runs++;
    const handlers = hooksStore[hookName].handlers;

    // The following code is stripped from production builds.
    if (true) {
      // Handle any 'all' hooks registered.
      if ('hookAdded' !== hookName && hooksStore.all) {
        handlers.push(...hooksStore.all.handlers);
      }
    }
    if (!handlers || !handlers.length) {
      return returnFirstArg ? args[0] : undefined;
    }
    const hookInfo = {
      name: hookName,
      currentIndex: 0
    };
    hooksStore.__current.push(hookInfo);
    while (hookInfo.currentIndex < handlers.length) {
      const handler = handlers[hookInfo.currentIndex];
      const result = handler.callback.apply(null, args);
      if (returnFirstArg) {
        args[0] = result;
      }
      hookInfo.currentIndex++;
    }
    hooksStore.__current.pop();
    if (returnFirstArg) {
      return args[0];
    }
    return undefined;
  };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createRunHook);
//# sourceMappingURL=createRunHook.js.map

/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   actions: () => (/* binding */ actions),
/* harmony export */   addAction: () => (/* binding */ addAction),
/* harmony export */   addFilter: () => (/* binding */ addFilter),
/* harmony export */   applyFilters: () => (/* binding */ applyFilters),
/* harmony export */   createHooks: () => (/* reexport safe */ _createHooks__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   currentAction: () => (/* binding */ currentAction),
/* harmony export */   currentFilter: () => (/* binding */ currentFilter),
/* harmony export */   defaultHooks: () => (/* binding */ defaultHooks),
/* harmony export */   didAction: () => (/* binding */ didAction),
/* harmony export */   didFilter: () => (/* binding */ didFilter),
/* harmony export */   doAction: () => (/* binding */ doAction),
/* harmony export */   doingAction: () => (/* binding */ doingAction),
/* harmony export */   doingFilter: () => (/* binding */ doingFilter),
/* harmony export */   filters: () => (/* binding */ filters),
/* harmony export */   hasAction: () => (/* binding */ hasAction),
/* harmony export */   hasFilter: () => (/* binding */ hasFilter),
/* harmony export */   removeAction: () => (/* binding */ removeAction),
/* harmony export */   removeAllActions: () => (/* binding */ removeAllActions),
/* harmony export */   removeAllFilters: () => (/* binding */ removeAllFilters),
/* harmony export */   removeFilter: () => (/* binding */ removeFilter)
/* harmony export */ });
/* harmony import */ var _createHooks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createHooks */ "./node_modules/@wordpress/hooks/build-module/createHooks.js");
/**
 * Internal dependencies
 */


/** @typedef {(...args: any[])=>any} Callback */

/**
 * @typedef Handler
 * @property {Callback} callback  The callback
 * @property {string}   namespace The namespace
 * @property {number}   priority  The namespace
 */

/**
 * @typedef Hook
 * @property {Handler[]} handlers Array of handlers
 * @property {number}    runs     Run counter
 */

/**
 * @typedef Current
 * @property {string} name         Hook name
 * @property {number} currentIndex The index
 */

/**
 * @typedef {Record<string, Hook> & {__current: Current[]}} Store
 */

/**
 * @typedef {'actions' | 'filters'} StoreKey
 */

/**
 * @typedef {import('./createHooks').Hooks} Hooks
 */

const defaultHooks = (0,_createHooks__WEBPACK_IMPORTED_MODULE_0__["default"])();
const {
  addAction,
  addFilter,
  removeAction,
  removeFilter,
  hasAction,
  hasFilter,
  removeAllActions,
  removeAllFilters,
  doAction,
  applyFilters,
  currentAction,
  currentFilter,
  doingAction,
  doingFilter,
  didAction,
  didFilter,
  actions,
  filters
} = defaultHooks;

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/validateHookName.js":
/*!************************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/validateHookName.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Validate a hookName string.
 *
 * @param {string} hookName The hook name to validate. Should be a non empty string containing
 *                          only numbers, letters, dashes, periods and underscores. Also,
 *                          the hook name cannot begin with `__`.
 *
 * @return {boolean} Whether the hook name is valid.
 */
function validateHookName(hookName) {
  if ('string' !== typeof hookName || '' === hookName) {
    // eslint-disable-next-line no-console
    console.error('The hook name must be a non-empty string.');
    return false;
  }
  if (/^__/.test(hookName)) {
    // eslint-disable-next-line no-console
    console.error('The hook name cannot begin with `__`.');
    return false;
  }
  if (!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(hookName)) {
    // eslint-disable-next-line no-console
    console.error('The hook name can only contain numbers, letters, dashes, periods and underscores.');
    return false;
  }
  return true;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validateHookName);
//# sourceMappingURL=validateHookName.js.map

/***/ }),

/***/ "./node_modules/@wordpress/hooks/build-module/validateNamespace.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@wordpress/hooks/build-module/validateNamespace.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Validate a namespace string.
 *
 * @param {string} namespace The namespace to validate - should take the form
 *                           `vendor/plugin/function`.
 *
 * @return {boolean} Whether the namespace is valid.
 */
function validateNamespace(namespace) {
  if ('string' !== typeof namespace || '' === namespace) {
    // eslint-disable-next-line no-console
    console.error('The namespace must be a non-empty string.');
    return false;
  }
  if (!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(namespace)) {
    // eslint-disable-next-line no-console
    console.error('The namespace can only contain numbers, letters, dashes, periods, underscores and slashes.');
    return false;
  }
  return true;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validateNamespace);
//# sourceMappingURL=validateNamespace.js.map

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!******************************!*\
  !*** ./assets/js/builder.js ***!
  \******************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _wordpress_hooks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/hooks */ "./node_modules/@wordpress/hooks/build-module/index.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _this = undefined;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

var Builder,
  sketch = VueColor.Sketch,
  dummyLightBoxComponent = 'sby-dummy-lightbox-component';
SB_Customizer.initPromise.then(function (customizer) {
  var _objectSpread2;
  var extraMethods = _objectSpread(_objectSpread({}, customizer.extraMethods), {}, {
    updateColorValue: function updateColorValue(id) {
      var self = this;
      self.customizerFeedData.settings[id] = self.customizerFeedData.settings[id].a == 1 ? self.customizerFeedData.settings[id].hex : self.customizerFeedData.settings[id].hex8;
    },
    sw_feed_params: function sw_feed_params() {
      var sw_feed_param = '';
      if (this.sw_feed) {
        sw_feed_param += '&sw-feed=true';
      }
      if (this.sw_feed_id) {
        sw_feed_param += '&sw-feed-id=' + this.sw_feed_id;
      }
      return sw_feed_param;
    },
    swfeedReturnUrl: function swfeedReturnUrl() {
      var self = this;
      var sw_return_url = '';
      if (self.sw_feed) {
        sw_return_url = 'admin.php?page=sbsw#/create-feed';
      }
      if (self.sw_feed_id) {
        sw_return_url = 'admin.php?page=sbsw&feed_id=' + self.sw_feed_id;
      }
      return sw_return_url;
    },
    customizerStyleMaker: function customizerStyleMaker() {
      var self = this;
      if (self.customizerSidebarBuilder) {
        self.feedStyle = '';
        Object.values(self.customizerSidebarBuilder).map(function (tab) {
          self.customizerSectionStyle(tab.sections);
        });
        return '<style type="text/css">' + self.feedStyle + '</style>';
      }
      return false;
    },
    customizerSectionStyle: function customizerSectionStyle(sections) {
      var self = this;
      Object.values(sections).map(function (section) {
        if (section.controls) {
          Object.values(section.controls).map(function (control) {
            self.returnControlStyle(control);
          });
        }
        if (section.nested_sections) {
          self.customizerSectionStyle(section.nested_sections);
          Object.values(section.nested_sections).map(function (nestedSections) {
            Object.values(nestedSections.controls).map(function (nestedControl) {
              if (nestedControl.section) {
                self.customizerSectionStyle(nestedControl);
              }
            });
          });
        }
      });
    },
    returnControlStyle: function returnControlStyle(control) {
      var self = this;
      if (control.style) {
        Object.entries(control.style).map(function (css) {
          var condition = control.condition != undefined || control.checkExtension != undefined ? self.checkControlCondition(control.condition, control.checkExtension) : true;
          if (condition) {
            self.feedStyle += css[0] + '{' + css[1].replaceAll("{{value}}", self.customizerFeedData.settings[control.id]) + '}';
          }
        });
      }
    },
    /**
     * Ajax Post Action
     *
     * @since 2.0
     */
    ajaxPost: function ajaxPost(data, callback) {
      var self = this;
      data['nonce'] = this.nonce;
      self.$http.post(self.ajaxHandler, data).then(callback);
    },
    /**
     * Show & Hide View
     *
     * @since 2.0
     */
    activateView: function activateView(viewName) {
      var sourcePopupType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'creation';
      var ajaxAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var self = this;
      self.viewsActive[viewName] = self.viewsActive[viewName] == false ? true : false;
      self.shouldShowFeedAPIForm = false;
      self.shouldShowManualConnect = false;
      self.shouldShowFeedAPIBackBtn = false;
      if (viewName == 'editName') {
        document.getElementById("sbc-csz-hd-input").focus();
      }
      if (viewName === 'feedtypesPopup') {
        self.viewsActive.feedTemplateElement = null;
        document.querySelector('body').classList.toggle('overflow-hidden');
      }
      if (viewName === 'feedtemplatesPopup') {
        self.viewsActive.feedTemplateElement = null;
        document.querySelector('body').classList.toggle('overflow-hidden');
      }
      if (viewName == 'embedPopup' && ajaxAction == true) {
        self.saveFeedSettings();
      }
      Builder.$forceUpdate();
    },
    /**
     * Switch Customizer Tab
     *
     * @sicne 2.0
     */
    switchCustomizerTab: function switchCustomizerTab(tabId) {
      var self = this,
        domBody = document.getElementsByTagName("body")[0];
      self.customizerScreens.activeTab = tabId;
      self.customizerScreens.activeSection = null;
      self.customizerScreens.activeSectionData = null;
      self.highLightedSection = 'all';
      self.dummyLightBoxScreen = false;
      domBody.classList.remove("no-overflow");
      Builder.$forceUpdate();
    },
    switchCustomizerSection: function switchCustomizerSection(sectionId, section) {
      var isNested = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var isBackElements = arguments.length > 3 ? arguments[3] : undefined;
      var self = this;
      self.customizerScreens.parentActiveSection = null;
      self.customizerScreens.parentActiveSectionData = null;
      if (isNested) {
        self.customizerScreens.parentActiveSection = self.customizerScreens.activeSection;
        self.customizerScreens.parentActiveSectionData = self.customizerScreens.activeSectionData;
      }
      self.customizerScreens.activeSection = sectionId;
      self.customizerScreens.activeSectionData = section;
      if (!isBackElements) {
        self.enableHighLightSection(sectionId);
      }
    },
    /**
     * Ajax Action : Save Feed Settings
     *
     * @since 2.0
     */
    saveFeedSettings: function saveFeedSettings() {
      var leavePage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var self = this,
        sources = [],
        updateFeedData = {
          action: 'sby_feed_saver_manager_builder_update',
          update_feed: 'true',
          feed_id: self.customizerFeedData.feed_info.id,
          feed_name: self.customizerFeedData.feed_info.feed_name,
          settings: self.customizerFeedData.settings
        };
      self.loadingBar = true;
      self.ajaxPost(updateFeedData, function (_ref) {
        var data = _ref.data;
        if (data && data.success === true) {
          self.processNotification('feedSaved');
          self.customizerFeedDataInitial = self.customizerFeedData;
          if (leavePage === true) {
            setTimeout(function () {
              window.location.href = self.builderUrl;
            }, 1500);
          }
        } else {
          self.processNotification('feedSavedError');
        }
      });
      Builder.$forceUpdate();
    },
    /**
     * Activate license key from license error post grace period header notice 
     * 
     * @since 2.0.2
     */
    activateLicense: function activateLicense() {
      var self = this;
      self.licenseBtnClicked = true;
      if (self.licenseKey == null) {
        self.licenseBtnClicked = false;
        return;
      }
      var licenseData = {
        action: 'sby_license_activation',
        nonce: sbc_builder.nonce,
        license_key: self.licenseKey
      };
      self.ajaxPost(licenseData, function (_ref) {
        self.licenseBtnClicked = false;
        var data = _ref.data;
        if (data && data.success == false) {
          self.processNotification("licenseError");
          return;
        }
        if (data !== false) {
          self.processNotification("licenseActivated");
          // remove license notices
          self.viewsActive.licenseLearnMore = false;
          jQuery('#sby-license-expired-agp').slideUp();
          jQuery('#sbc-builder-app').removeClass('sbc-builder-app-lite-dismiss');
          jQuery('.sby_get_pro_highlight, .sby_get_cff, .sby_get_sbi, .sby_get_ctf').closest('li').remove();
        }
      });
    },
    /**
     * Ajax Action : Clear Single Feed Cache
     * Update Feed Preview Too
     * @since 2.0
     */
    clearSingleFeedCache: function clearSingleFeedCache() {
      var self = this,
        sources = [],
        clearFeedData = {
          action: 'sby_feed_saver_manager_clear_single_feed_cache',
          feedID: self.customizerFeedData.feed_info.id,
          feedName: self.customizerFeedData.feed_info.feed_name,
          previewSettings: self.customizerFeedData.settings
        };
      self.loadingBar = true;
      self.ajaxPost(clearFeedData, function (_ref) {
        var data = _ref.data;
        if (data !== false) {
          self.updatedTimeStamp = new Date().getTime();
          self.template = String("<div>" + data.feed_html + "</div>");
          self.processNotification('cacheCleared');
        } else {
          self.processNotification("unkownError");
        }
      });
      Builder.$forceUpdate();
    },
    //Section Checkbox
    changeCheckboxSectionValue: function changeCheckboxSectionValue(settingID, value) {
      var ajaxAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var checkBoxAction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var self = this;
      if (checkBoxAction !== false) {
        self.customizerFeedData.settings[settingID] = self.customizerFeedData.settings[settingID] == checkBoxAction.options.enabled ? checkBoxAction.options.disabled : checkBoxAction.options.enabled;
      } else {
        var settingValue = self.customizerFeedData.settings[settingID];
        if (!Array.isArray(settingValue) && settingID == 'type') {
          settingValue = [settingValue];
        }
        if (settingValue.includes(value)) {
          settingValue.splice(settingValue.indexOf(value), 1);
        } else {
          settingValue.push(value);
        }
        if (settingID == 'type') {
          self.processFeedTypesSources(settingValue);
        }
        //settingValue = (settingValue.length == 1 && settingID == 'type') ? settingValue[0] : settingValue;
        self.customizerFeedData.settings[settingID] = settingValue;
      }
      if (ajaxAction !== false) {
        self.customizerControlAjaxAction(ajaxAction);
      }
      event.stopPropagation();
    },
    checkboxSectionValueExists: function checkboxSectionValueExists() {
      var settingID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'includes';
      var value = arguments.length > 1 ? arguments[1] : undefined;
      var self = this;
      var settingValue = self.customizerFeedData.settings[settingID];
      return settingValue.includes(value) ? true : false;
    },
    /**
     * Loading Bar & Notification
     *
     * @since 2.0
     */
    processNotification: function processNotification(notificationType) {
      var self = this,
        notification = self.genericText.notification[notificationType];
      self.loadingBar = false;
      self.notificationElement = {
        type: notification.type,
        text: notification.text,
        shown: "shown"
      };
      setTimeout(function () {
        self.notificationElement.shown = "hidden";
      }, 5000);
    },
    updateInputWidth: function updateInputWidth() {
      this.customizerScreens.inputNameWidth = (document.getElementById("sbc-csz-hd-input").value.length + 6) * 8 + 'px';
    },
    /**
     * Enable Highlight Section
     *
     * @since 2.0
     */
    enableHighLightSection: function enableHighLightSection(sectionId) {
      var self = this,
        listPostSection = ['customize_feedlayout', 'customize_colorscheme', 'customize_videos', 'post_style', 'individual_elements'],
        headerSection = ['customize_header'],
        followButtonSection = ['customize_followbutton'],
        loadeMoreSection = ['customize_loadmorebutton'],
        lightBoxSection = ['customize_lightbox'],
        domBody = document.getElementsByTagName("body")[0];
      self.dummyLightBoxScreen = false;
      domBody.classList.remove("no-overflow");
      if (listPostSection.includes(sectionId)) {
        self.highLightedSection = 'postList';
        self.scrollToHighLightedSection("sbi_images");
      } else if (headerSection.includes(sectionId)) {
        self.highLightedSection = 'header';
        self.scrollToHighLightedSection("sb_instagram_header");
      } else if (followButtonSection.includes(sectionId)) {
        self.highLightedSection = 'followButton';
        self.scrollToHighLightedSection("sbi_load");
      } else if (loadeMoreSection.includes(sectionId)) {
        self.highLightedSection = 'loadMore';
        self.scrollToHighLightedSection("sbi_load");
      } else if (lightBoxSection.includes(sectionId)) {
        self.highLightedSection = 'lightBox';
        self.dummyLightBoxScreen = true;
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
        domBody.classList.add("no-overflow");
      } else {
        self.highLightedSection = 'all';
        self.dummyLightBoxScreen = false;
        domBody.classList.remove("no-overflow");
      }
    },
    /**
     * Scroll to Highlighted Section
     *
     * @since 2.0
     */
    scrollToHighLightedSection: function scrollToHighLightedSection(sectionId) {
      var element = document.getElementById(sectionId) !== undefined && document.getElementById(sectionId) !== null ? document.getElementById(sectionId) : document.getElementsByClassName(sectionId)[0] !== undefined && document.getElementsByClassName(sectionId)[0] !== null ? document.getElementsByClassName(sectionId)[0] : null;
      if (element != undefined && element != null) {
        var y = element.getBoundingClientRect().top - 120 + window.pageYOffset - 10;
        window.scrollTo({
          top: y,
          behavior: 'smooth'
        });
      }
    },
    ctaToggleFeatures: function ctaToggleFeatures() {
      var self = this;
      self.freeCtaShowFeatures = !self.freeCtaShowFeatures;
      Builder.$forceUpdate();
    },
    /**
     * Show Control
     *
     * @since 2.0
     */
    isControlShown: function isControlShown(control) {
      var self = this;
      if (control.checkViewDisabled != undefined) {
        return !self.viewsActive[control.checkViewDisabled];
      }
      if (control.checkView != undefined) {
        return !self.viewsActive[control.checkView];
      }
      if (control.checkExtension != undefined && control.checkExtension != false && !self.checkExtensionActive(control.checkExtension)) {
        return self.checkExtensionActive(control.checkExtension);
      }
      if (control.conditionDimmed != undefined && self.checkControlCondition(control.conditionDimmed)) return self.checkControlCondition(control.conditionDimmed);
      if (control.overrideColorCondition != undefined) {
        return self.checkControlOverrideColor(control.overrideColorCondition);
      }
      return control.conditionHide != undefined && control.condition != undefined || control.checkExtension != undefined ? self.checkControlCondition(control.condition, control.checkExtension) : true;
    },
    /**
     * Check Color Override Condition
     *
     * @since 2.0
     */
    checkControlOverrideColor: function checkControlOverrideColor() {
      var overrideConditionsArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var self = this,
        isConditionTrue = 0;
      overrideConditionsArray.map(function (condition, index) {
        if (self.checkNotEmpty(self.customizerFeedData.settings[condition]) && self.customizerFeedData.settings[condition].replace(/ /gi, '') != '#') {
          isConditionTrue += 1;
        }
      });
      return isConditionTrue >= 1 ? true : false;
    },
    switchNestedSection: function switchNestedSection(sectionId, section) {
      var self = this;
      if (section !== null) {
        self.customizerScreens.activeSection = sectionId;
        self.customizerScreens.activeSectionData = section;
      } else {
        var sectionArray = sectionId['sections'];
        var elementSectionData = self.customizerSidebarBuilder;
        sectionArray.map(function (elm, index) {
          elementSectionData = elementSectionData[elm] != undefined && elementSectionData[elm] != null ? elementSectionData[elm] : null;
        });
        if (elementSectionData != null) {
          self.customizerScreens.activeSection = sectionId['id'];
          self.customizerScreens.activeSectionData = elementSectionData;
        }
      }
      Builder.$forceUpdate();
    },
    /**
     * Check Control Condition
     *
     * @since 2.0
     */
    checkControlCondition: function checkControlCondition() {
      var conditionsArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var checkExtensionActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var checkExtensionActiveDimmed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var self = this,
        isConditionTrue = 0;
      Object.keys(conditionsArray).forEach(function (condition, index) {
        if (conditionsArray[condition].indexOf(self.customizerFeedData.settings[condition]) !== -1) isConditionTrue += 1;
      });
      var extensionCondition = checkExtensionActive != undefined && checkExtensionActive != false ? self.checkExtensionActive(checkExtensionActive) : true,
        extensionCondition = checkExtensionActiveDimmed != undefined && checkExtensionActiveDimmed != false && !self.checkExtensionActive(checkExtensionActiveDimmed) ? false : extensionCondition;
      return isConditionTrue == Object.keys(conditionsArray).length ? extensionCondition : false;
    },
    //Change Switcher Settings
    changeSwitcherSettingValue: function changeSwitcherSettingValue(settingID, onValue, offValue) {
      var ajaxAction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var self = this;
      self.customizerFeedData.settings[settingID] = self.customizerFeedData.settings[settingID] == onValue ? offValue : onValue;
      if (ajaxAction !== false) {
        self.customizerControlAjaxAction(ajaxAction);
      }
      self.regenerateLayout(settingID);
    },
    selectedFeedTypeCustomizer: function selectedFeedTypeCustomizer(feedtype) {
      var self = this,
        result = false;
      if (self.customizerFeedData.settings.type === feedtype) {
        result = true;
      }
      return result;
    },
    selectedFeedTemplateCustomizer: function selectedFeedTemplateCustomizer(feedtemplate) {
      var self = this,
        result = false;
      var self = this,
        result = false;
      if (self.viewsActive.feedTemplateElement === null && self.customizerFeedData.settings.feedtemplate === feedtemplate || self.viewsActive.feedTemplateElement !== null && self.viewsActive.feedTemplateElement == feedtemplate) {
        result = true;
      }
      return result;
    },
    chooseCustomizerFeedType: function chooseCustomizerFeedType(feedType) {
      var self = this;
      self.selectedFeed = feedType.type;
      var ifFeedAvailable = self.hasFeature(self.selectedFeed + '_feeds');
      if (self.selectedFeed != 'channel' && !self.apiKeyStatus && self.selectedFeed !== 'social_wall') {
        self.viewsActive.feedtypesPopup = false;
        self.activateView('accountAPIPopup');
        self.shouldShowFeedAPIForm = true;
        return;
      }
      if (self.selectedFeed === 'social_wall') {
        if (self.socialWallActivated) {
          window.location.href = self.socialWallAdminPage;
          return;
        }
        self.activateView('feedtypesPopup');
        self.viewsActive.extensionsPopupElement = 'social_wall';
      } else {
        if (!ifFeedAvailable) {
          self.viewsActive.extensionsPopupElement = self.selectedFeed;
        } else {
          self.customizerFeedData.settings.type = feedType.type;
        }
      }
      Builder.$forceUpdate();
    },
    chooseFeedTemplate: function chooseFeedTemplate(feedTemplate) {
      var iscustomizerPopup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var self = this;
      self.selectedFeedTemplate = feedTemplate.type;
      if (iscustomizerPopup) {
        if (!self.sbyIsPro || self.sbyLicenseNoticeActive || self.sbyLicenseInactiveState || !self.hasFeature('feeds_templates')) {
          self.activateView('feedtemplatesPopup');
          self.viewsActive.extensionsPopupElement = 'feedTemplate';
        } else {
          self.viewsActive.feedTemplateElement = feedTemplate.type;
        }
      }
      Builder.$forceUpdate();
    },
    customizerFeedTypePrint: function customizerFeedTypePrint() {
      var self = this;
      // Support for versions before v4.2
      if (self.customizerFeedData.settings.type == undefined) {
        self.customizerFeedData.settings.type = 'default';
      }
      var result = self.feedTypes.filter(function (tp) {
        return tp.type === self.customizerFeedData.settings.type;
      });
      self.customizerScreens.printedTemplate = result.length > 0 ? result[0] : [];
      return result.length > 0 ? true : false;
    },
    customizerFeedTemplatePrint: function customizerFeedTemplatePrint() {
      var self = this;
      // Support for versions before v4.2
      if (self.customizerFeedData.settings.feedtemplate == undefined) {
        self.customizerFeedData.settings.feedtemplate = 'default';
      }
      var result = self.feedTemplates.filter(function (tp) {
        return tp.type === self.customizerFeedData.settings.feedtemplate;
      });
      self.customizerScreens.printedTemplate = result.length > 0 ? result[0] : [];
      return result.length > 0 ? true : false;
    },
    updateFeedTemplateCustomizer: function updateFeedTemplateCustomizer() {
      var self = this;
      self.customizerFeedData.settings.feedtemplate = self.viewsActive.feedTemplateElement != null ? self.viewsActive.feedTemplateElement : self.customizerFeedData.settings.feedtemplate;
      self.viewsActive.feedTemplateElement = null;
      self.viewsActive.feedtemplatesPopup = false;
      self.customizerControlAjaxAction('feedTemplateFlyPreview');
      Builder.$forceUpdate();
    },
    updateFeedTypeCustomizer: function updateFeedTypeCustomizer() {
      var self = this;
      self.viewsActive.feedtypesPopup = false;
      self.customizerControlAjaxAction('feedTypeFlyPreview');
      Builder.$forceUpdate();
    },
    /**
     * Check if Data Setting is Enabled
     *
     * @since 2.0
     *
     * @return boolean
     */
    valueIsEnabled: function valueIsEnabled(value) {
      return value == 1 || value == true || value == 'true' || value == 'on';
    },
    /**
     * Check if Value is Empty
     *
     * @since 2.0
     *
     * @return boolean
     */
    checkNotEmpty: function checkNotEmpty(value) {
      return value != null && value.replace(/ /gi, '') != '';
    },
    /**
     * Hide Color Picker
     *
     * @since 4.0
     */
    hideColorPickerPospup: function hideColorPickerPospup() {
      this.customizerScreens.activeColorPicker = null;
    },
    switchScreen: function switchScreen(screenType, screenName) {
      this.viewsActive[screenType] = screenName;
      Builder.$forceUpdate();
    },
    /**
     * Parse JSON
     *
     * @since 4.0
     *
     * @return jsonObject / Boolean
     */
    jsonParse: function jsonParse(jsonString) {
      try {
        return JSON.parse(jsonString);
      } catch (e) {
        return false;
      }
    },
    /**
     * Creation process check action
     *
     * @since 2.0
     */
    creationProcessCheckAction: function creationProcessCheckAction() {
      var self = this,
        checkBtnNext = false;
      switch (self.viewsActive.selectedFeedSection) {
        case 'feedsType':
          checkBtnNext = self.selectedFeed != null ? true : false;
          window.ctfSelectedFeed = self.selectedFeed;
          break;
        case 'selectSource':
          checkBtnNext = self.creationProcessCheckAppCredentials();
          break;
        case 'selectTemplate':
          checkBtnNext = self.creationProcessCheckAppCredentials();
          break;
        case 'feedsTypeGetProcess':
          break;
      }
      return checkBtnNext;
    },
    /**
     * Back to elements
     *
     * @since 2.0
     */
    backToPostElements: function backToPostElements() {
      var self = this,
        individual_elements = self.customizerSidebarBuilder['customize'].sections.customize_videos.nested_sections.individual_elements;
      self.customizerScreens.activeSection = 'customize_videos';
      self.customizerScreens.activeSectionData = self.customizerSidebarBuilder['customize'].sections.customize_videos;
      self.switchCustomizerSection('individual_elements', individual_elements, true, true);
      Builder.$forceUpdate();
    },
    /**
     * Back to elements
     *
     * @since 2.0
     */
    backToLightboxExperience: function backToLightboxExperience() {
      var self = this,
        lightbox_experience = self.customizerSidebarBuilder['customize'].sections.customize_videos.nested_sections.customize_lightbox;
      self.customizerScreens.activeSection = 'customize_lightbox';
      self.customizerScreens.activeSectionData = self.customizerSidebarBuilder['customize'].sections.customize_videos;
      self.switchCustomizerSection('customize_lightbox', lightbox_experience, true, true);
      Builder.$forceUpdate();
    },
    /**
     * Creation process next
     *
     * @since 2.0
     */
    creationProcessNext: function creationProcessNext() {
      var self = this;
      switch (self.viewsActive.selectedFeedSection) {
        case 'feedsType':
          // if feed type is channel
          if (self.selectedFeed === 'channel') {
            if (self.connectedAccountStatus || self.apiKeyStatus) {
              self.switchScreen('selectedFeedSection', 'selectSource');
            }
            if (!self.connectedAccountStatus && !self.apiKeyStatus) {
              self.activateView('accountAPIPopup');
            }
            return;
          }

          // if feed type is not channel
          if (self.selectedFeed !== 'channel' && !self.apiKeyStatus) {
            self.activateView('accountAPIPopup');
            self.shouldShowFeedAPIForm = true;
            return;
          }
          if (self.selectedFeed !== null) {
            self.switchScreen('selectedFeedSection', 'selectSource');
          }
          break;
        case 'selectSource':
          var selectedFeedTypeSource = self.selectedFeedModel[self.selectedFeed];
          if (selectedFeedTypeSource) {
            if (self.sbyLicenseNoticeActive || !self.hasFeature('feeds_templates')) {
              self.isCreateProcessGood = true;
            } else {
              var sourceVerified = self.verifySource();
              if (sourceVerified) {
                self.switchScreen('selectedFeedSection', 'selectTemplate');
              } else {
                jQuery('.sbc-select-source-content ul').removeClass('highlight-rules').addClass('highlight-rules');
              }
            }
          }
          break;
        case 'selectTemplate':
          self.isCreateProcessGood = true;
          break;
        case 'feedsTypeGetProcess':
          break;
      }
      if (self.isCreateProcessGood) self.submitNewFeed();
    },
    verifySource: function verifySource() {
      var self = this;
      var feedType = self.selectedFeed;
      var sourceURL = self.selectedFeedModel[self.selectedFeed];
      var sourceVerified = true;
      var regex = /youtube\.com\/(channel|user|playlist|watch)/;
      if (regex.test(sourceURL)) {
        sourceVerified = false;
      }
      return sourceVerified;
    },
    /**
     * Copy text to clipboard
     *
     * @since 2.0
     */
    copyToClipBoard: function copyToClipBoard(value) {
      var self = this;
      var el = document.createElement('textarea');
      el.className = 'ctf-fb-cp-clpboard';
      el.value = value;
      document.body.appendChild(el);
      el.select();
      document.execCommand('copy');
      document.body.removeChild(el);
      self.notificationElement = {
        type: 'success',
        text: this.genericText.copiedClipboard,
        shown: "shown"
      };
      setTimeout(function () {
        self.notificationElement.shown = "hidden";
      }, 3000);
      Builder.$forceUpdate();
    },
    /**
     * Duplicate Feed
     *
     * @since 2.0
     */
    feedActionDuplicate: function feedActionDuplicate(feed) {
      var self = this,
        feedsDuplicateData = {
          action: 'sby_feed_saver_manager_duplicate_feed',
          feed_id: feed.id
        };
      self.ajaxPost(feedsDuplicateData, function (_ref) {
        var data = _ref.data;
        self.feedsList = Object.values(Object.assign({}, data));
        //self.feedsList = data;
      });
      Builder.$forceUpdate();
    },
    /**
     * Select Single Feed in List
     *
     * @since 2.0
     */
    selectFeedCheckBox: function selectFeedCheckBox(feedID) {
      if (this.feedsSelected.includes(feedID)) {
        this.feedsSelected.splice(this.feedsSelected.indexOf(feedID), 1);
      } else {
        this.feedsSelected.push(feedID);
      }
      Builder.$forceUpdate();
    },
    /**
     * Select All Feeds in List
     *
     * @since 2.0
     */
    selectAllFeedCheckBox: function selectAllFeedCheckBox() {
      var self = this;
      if (!self.checkAllFeedsActive()) {
        self.feedsSelected = [];
        self.feedsList.forEach(function (feed) {
          self.feedsSelected.push(feed.id);
        });
      } else {
        self.feedsSelected = [];
      }
    },
    /**
     * Check if All Feeds are Selected
     *
     * @since 2.0
     */
    checkAllFeedsActive: function checkAllFeedsActive() {
      var self = this,
        result = true;
      self.feedsList.forEach(function (feed) {
        if (!self.feedsSelected.includes(feed.id)) {
          result = false;
        }
      });
      return result;
    },
    /**
     * Switch Bulk Action
     *
     * @since 2.0
     */
    bulkActionClick: function bulkActionClick() {
      var self = this;
      switch (self.selectedBulkAction) {
        case 'delete':
          if (self.feedsSelected.length > 0) {
            self.openDialogBox('deleteMultipleFeeds');
          }
          break;
      }
      Builder.$forceUpdate();
    },
    switchCustomizerPreviewDevice: function switchCustomizerPreviewDevice(previewScreen) {
      var self = this;
      self.customizerScreens.previewScreen = previewScreen;
      self.loadingBar = true;
      setTimeout(function () {
        self.setShortcodeGlobalSettings(true);
        self.loadingBar = false;
      }, 200);
      Builder.$forceUpdate();
    },
    /**
     * Reset color from the customizer color picker
     *
     * @since 2.0
     */
    resetColor: function resetColor(controlId) {
      this.customizerFeedData.settings[controlId] = '';
    },
    /**
     * Show Tooltip on Hover
     *
     * @since 2.0
     */
    toggleElementTooltip: function toggleElementTooltip(tooltipText, type) {
      var align = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'center';
      var self = this,
        target = window.event.currentTarget,
        tooltip = target != undefined && target != null ? document.querySelector('.sb-control-elem-tltp-content') : null;
      if (tooltip != null && type == 'show') {
        self.tooltip.text = tooltipText;
        var position = target.getBoundingClientRect(),
          left = position.left + 10,
          top = position.top - 10;
        tooltip.style.left = left + 'px';
        tooltip.style.top = top + 'px';
        tooltip.style.textAlign = align;
        self.tooltip.hover = true;
      }
      if (type == 'hide') {
        setTimeout(function () {
          if (self.tooltip.hoverType != 'inside') {
            self.tooltip.hover = false;
          }
        }, 200);
      }
    },
    /**
     * Hover Tooltip
     *
     * @since 2.0
     */
    hoverTooltip: function hoverTooltip(type, hoverType) {
      this.tooltip.hover = type;
      this.tooltip.hoverType = hoverType;
    },
    reCheckLicenseKey: function reCheckLicenseKey() {
      var _this2 = this;
      var self = this;
      var licenseNoticeWrapper = document.querySelector('.sb-license-notice');
      this.recheckLicenseStatus = 'loading';
      var data = new FormData();
      data.append('action', 'sby_recheck_connection');
      data.append('license_key', self.licenseKey);
      data.append('nonce', self.nonce);
      fetch(this.ajaxHandler, {
        method: "POST",
        credentials: 'same-origin',
        body: data
      }).then(function (response) {
        return response.json();
      }).then(function (data) {
        if (data.success == true) {
          if (data.data.license == 'valid') {
            _this2.recheckLicenseStatus = 'success';
          }
          if (data.data.license != 'valid') {
            _this2.recheckLicenseStatus = 'error';
          }
          // if the api license status has changed from old stored license status
          // then reload the page to show proper error message and notices
          // or hide error messages and notices

          setTimeout(function () {
            this.recheckLicenseStatus = null;
            if (data.data.license == 'valid') {
              licenseNoticeWrapper.remove();
            }
          }.bind(_this2), 3000);
        }
        return;
      });
    },
    recheckBtnText: function recheckBtnText(btnName) {
      var self = this;
      if (self.recheckLicenseStatus == null) {
        return self.genericText.recheckLicenseKey;
      } else if (self.recheckLicenseStatus == 'loading') {
        return self.svgIcons['loader'];
      } else if (self.recheckLicenseStatus == 'success') {
        return self.svgIcons.checkmarkCircleSVG + ' ' + self.genericText.licenseValid;
      } else if (self.recheckLicenseStatus == 'error') {
        return self.svgIcons.timesSVG + self.genericText.licenseExpired;
      }
    },
    /**
     * Back Click in the Creation Process
     *
     * @since 2.0
     */
    creationProcessBack: function creationProcessBack() {
      var self = this;
      switch (self.viewsActive.selectedFeedSection) {
        case 'feedsType':
          self.switchScreen('pageScreen', 'welcome');
          break;
        case 'selectSource':
          self.switchScreen('selectedFeedSection', 'feedsType');
          break;
        case 'selectTemplate':
          self.switchScreen('selectedFeedSection', 'selectSource');
          break;
        case 'feedsTypeGetProcess':
          self.switchScreen('selectedFeedSection', 'selectSource');
          break;
      }
      Builder.$forceUpdate();
    },
    /**
     * Feed List Pagination
     *
     * @since 2.0
     */
    feedListPagination: function feedListPagination(type) {
      var self = this,
        currentPage = self.feedPagination.currentPage,
        pagesNumber = self.feedPagination.pagesNumber;
      self.loadingBar = true;
      if (currentPage != 1 && type == 'prev' || currentPage < pagesNumber && type == 'next') {
        self.feedPagination.currentPage = type == 'next' ? currentPage < pagesNumber ? parseInt(currentPage) + 1 : pagesNumber : currentPage > 1 ? parseInt(currentPage) - 1 : 1;
        var postData = {
          action: 'sby_feed_saver_manager_get_feed_list_page',
          page: self.feedPagination.currentPage
        };
        self.ajaxPost(postData, function (_ref) {
          var data = _ref.data;
          if (data) {
            self.feedsList = data;
          }
          self.loadingBar = false;
        });
        Builder.$forceUpdate();
      }
    },
    /**
     * Choose Feed Type
     *
     * @since 2.0
     */
    chooseFeedType: function chooseFeedType(feedTypeEl) {
      var iscustomizerPopup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var self = this;
      self.selectedFeed = feedTypeEl.type;
      var ifFeedAvailable = self.hasFeature(self.selectedFeed + '_feeds');
      if (self.selectedFeed === 'social_wall') {
        if (self.socialWallActivated) {
          window.location.href = self.socialWallAdminPage;
          return;
        }
        self.selectedFeed = null;
        self.viewsActive.extensionsPopupElement = 'social_wall';
      } else {
        if (!ifFeedAvailable) {
          self.viewsActive.extensionsPopupElement = self.selectedFeed;
          self.selectedFeed = null;
        }
      }
      Builder.$forceUpdate();
    },
    activateProExtPopup: function activateProExtPopup(feedType) {
      var self = this;
      self.viewsActive.extensionsPopupElement = feedType.type;
    },
    /**
     * Activate API Form
     * 
     * @since 2.0
     */
    activateAPIForm: function activateAPIForm() {
      var self = this;
      self.viewsActive.accountAPIPopup = true;
      self.shouldShowFeedAPIForm = true;
    },
    /**
     * Close Onboarding Process
     *
     * @since 2.0
     */
    onboardingClose: function onboardingClose() {
      var self = this,
        wasActive = self.viewsActive.onboardingPopup ? 'newuser' : 'customizer';
      document.getElementById("sbc-builder-app").classList.remove('sb-onboarding-active');
      self.viewsActive.onboardingPopup = false;
      self.viewsActive.onboardingCustomizerPopup = false;
      self.customizerScreens.activeTab = 'customize';
      self.viewsActive.onboardingStep = 0;
      var postData = {
        action: 'sby_dismiss_onboarding',
        was_active: wasActive
      };
      self.ajaxPost(postData, function (_ref) {
        var data = _ref.data;
      });
      Builder.$forceUpdate();
    },
    /**
     * Onboarding Process Next
     *
     * @since 2.0
     */
    onboardingNext: function onboardingNext() {
      this.viewsActive.onboardingStep++;
      this.onboardingHideShow();
      Builder.$forceUpdate();
    },
    /**
     * Onboarding Process Prev
     *
     * @since 2.0
     */
    onboardingPrev: function onboardingPrev() {
      this.viewsActive.onboardingStep--;
      this.onboardingHideShow();
      Builder.$forceUpdate();
    },
    /**
     * Onboarding hide and show
     *
     * @since 2.0
     */
    onboardingHideShow: function onboardingHideShow() {
      var tooltips = document.querySelectorAll(".sb-onboarding-tooltip");
      for (var i = 0; i < tooltips.length; i++) {
        tooltips[i].style.display = "none";
      }
      document.querySelectorAll(".sb-onboarding-tooltip-" + this.viewsActive.onboardingStep)[0].style.display = "block";
      if (this.viewsActive.onboardingCustomizerPopup) {
        if (this.viewsActive.onboardingStep === 2) {
          this.switchCustomizerTab('customize');
        } else if (this.viewsActive.onboardingStep === 3) {
          this.switchCustomizerTab('settings');
        }
      }
    },
    /**
     * Position onboarding
     *
     * @since 2.0
     */
    positionOnboarding: function positionOnboarding() {
      var self = this,
        onboardingElem = document.querySelectorAll(".sb-onboarding-overlay")[0],
        wrapElem = document.getElementById("sbc-builder-app");
      if (onboardingElem === null || typeof onboardingElem === 'undefined') {
        return;
      }
      if (self.viewsActive.onboardingCustomizerPopup && self.iscustomizerScreen && self.customizerFeedData) {
        if (document.getElementById("sb-onboarding-tooltip-customizer-1") !== null) {
          wrapElem.classList.add('sb-onboarding-active');
          var step1El = document.querySelectorAll(".sbc-yt-header")[0];
          step1El.appendChild(document.getElementById("sb-onboarding-tooltip-customizer-1"));
          var step2El = document.querySelectorAll(".sb-customizer-sidebar-sec1")[0];
          step2El.appendChild(document.getElementById("sb-onboarding-tooltip-customizer-2"));
          var step3El = document.querySelectorAll(".sb-customizer-sidebar-sec1")[0];
          step3El.appendChild(document.getElementById("sb-onboarding-tooltip-customizer-3"));
          self.onboardingHideShow();
        }
      } else if (self.viewsActive.onboardingPopup && !self.iscustomizerScreen) {
        if (sbc_builder.allFeedsScreen.onboarding.type === 'single') {
          if (document.getElementById("sb-onboarding-tooltip-single-1") !== null) {
            wrapElem.classList.add('sb-onboarding-active');
            var step1El = document.querySelectorAll(".ctf-fb-wlcm-header .sb-positioning-wrap")[0];
            step1El.appendChild(document.getElementById("sb-onboarding-tooltip-single-1"));
            var step2El = document.querySelectorAll(".ctf-table-wrap")[0];
            step2El.appendChild(document.getElementById("sb-onboarding-tooltip-single-2"));
            self.onboardingHideShow();
          }
        } else {
          if (document.getElementById("sb-onboarding-tooltip-multiple-1") !== null) {
            wrapElem.classList.add('sb-onboarding-active');
            var step1El = document.querySelectorAll(".ctf-fb-wlcm-header .sb-positioning-wrap")[0];
            step1El.appendChild(document.getElementById("sb-onboarding-tooltip-multiple-1"));
            var step2El = document.querySelectorAll(".ctf-fb-lgc-ctn")[0];
            step2El.appendChild(document.getElementById("sb-onboarding-tooltip-multiple-2"));
            var step3El = document.querySelectorAll(".ctf-legacy-table-wrap")[0];
            step3El.appendChild(document.getElementById("sb-onboarding-tooltip-multiple-3"));
            self.activateView('legacyFeedsShown');
            self.onboardingHideShow();
          }
        }
      }
    },
    /**
     * Customizer Control Ajax
     * Some of the customizer controls need to perform Ajax
     * Calls in order to update the preview
     *
     * @since 2.0
     */
    customizerControlAjaxAction: function customizerControlAjaxAction(actionType) {
      var settingID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var self = this;
      switch (actionType) {
        case 'feedFlyPreview':
          self.loadingBar = true;
          self.templateRender = false;
          var previewFeedData = {
            action: 'sby_feed_saver_manager_fly_preview',
            feedID: self.customizerFeedData.feed_info.id,
            previewSettings: self.customizerFeedData.settings,
            feedName: self.customizerFeedData.feed_info.feed_name
          };
          self.ajaxPost(previewFeedData, function (_ref) {
            var data = _ref.data;
            if (data !== false) {
              self.updatedTimeStamp = new Date().getTime();
              self.template = String("<div>" + data.feed_html + "</div>");
              // document.querySelector('body').classList.toggle('overflow-hidden');
              self.setShortcodeGlobalSettings(true);
              self.processNotification("previewUpdated");
            } else {
              self.processNotification("unkownError");
            }
          });
          break;
        case 'feedTypeFlyPreview':
          self.loadingBar = true;
          self.templateRender = false;
          var previewFeedData = {
            action: 'sby_feed_saver_manager_fly_preview',
            feedID: self.customizerFeedData.feed_info.id,
            previewSettings: self.customizerFeedData.settings,
            feedName: self.customizerFeedData.feed_info.feed_name,
            isFeedTypesPopup: true
          };
          self.ajaxPost(previewFeedData, function (_ref) {
            var data = _ref.data;
            if (data !== false) {
              self.customizerFeedData.settings = data.customizerDataSettings;
              self.updatedTimeStamp = new Date().getTime();
              self.template = String("<div>" + data.feed_html + "</div>");
              document.querySelector('body').classList.toggle('overflow-hidden');
              self.processNotification("previewUpdated");
              self.loadingBar = false;
              setTimeout(function () {
                self.setShortcodeGlobalSettings(true);
              }, 500);
            } else {
              self.processNotification("unkownError");
            }
          });
          break;
        case 'feedTemplateFlyPreview':
          self.loadingBar = true;
          self.templateRender = false;
          var previewFeedData = {
            action: 'sby_feed_saver_manager_fly_preview',
            feedID: self.customizerFeedData.feed_info.id,
            previewSettings: self.customizerFeedData.settings,
            feedName: self.customizerFeedData.feed_info.feed_name,
            isFeedTemplatesPopup: true
          };
          self.ajaxPost(previewFeedData, function (_ref) {
            var data = _ref.data;
            if (data !== false) {
              self.customizerFeedData.settings = data.customizerDataSettings;
              self.updatedTimeStamp = new Date().getTime();
              self.template = String("<div>" + data.feed_html + "</div>");
              self.processNotification("previewUpdated");
              document.querySelector('body').classList.toggle('overflow-hidden');
              self.loadingBar = false;
              setTimeout(function () {
                self.setShortcodeGlobalSettings(true);
              }, 500);
            } else {
              self.processNotification("unkownError");
            }
          });
          break;
        case 'feedRefresh':
          self.loadingBar = true;
          self.templateRender = false;
          var previewFeedData = {
            action: 'sby_feed_refresh',
            feedID: self.customizerFeedData.feed_info.id,
            previewSettings: self.customizerFeedData.settings,
            feedName: self.customizerFeedData.feed_info.feed_name
          };
          self.ajaxPost(previewFeedData, function (_ref) {
            var data = _ref.data;
            if (data !== false) {
              self.customizerFeedData.settings = data.customizerDataSettings;
              self.updatedTimeStamp = new Date().getTime();
              self.template = String("<div>" + data.feed_html + "</div>");
              setTimeout(function () {
                self.setShortcodeGlobalSettings(true);
                self.loadingBar = false;
              }, 200);
              self.processNotification("previewUpdated");
              self.loadingBar = false;
            } else {
              self.processNotification("unkownError");
            }
          });
          break;
        case 'filtersAndModeration':
          self.loadingBar = true;
          self.templateRender = false;
          var previewFeedData = {
            action: 'sby_feed_saver_manager_fly_preview',
            feedID: self.customizerFeedData.feed_info.id,
            previewSettings: self.customizerFeedData.settings,
            feedName: self.customizerFeedData.feed_info.feed_name,
            clearCache: true
          };
          self.ajaxPost(previewFeedData, function (_ref) {
            var data = _ref.data;
            if (data !== false) {
              self.updatedTimeStamp = new Date().getTime();
              self.template = String("<div>" + data.feed_html + "</div>");
              // document.querySelector('body').classList.toggle('overflow-hidden');
              self.setShortcodeGlobalSettings(true);
              self.processNotification("previewUpdated");
            } else {
              self.processNotification("unkownError");
            }
          });
          break;
        case 'feedPreviewRender':
          setTimeout(function () {}, 150);
          break;
        case 'feedHandleFlyPreview':
          self.loadingBar = true;
          self.templateRender = false;
          var previewFeedData = {
            action: 'sby_feed_handle_saver_manager_fly_preview',
            feedID: self.customizerFeedData.feed_info.id,
            previewSettings: self.customizerFeedData.settings,
            feedName: self.customizerFeedData.feed_info.feed_name,
            feedType: self.customizerFeedData.settings.type
          };
          self.ajaxPost(previewFeedData, function (_ref) {
            var data = _ref.data;
            if (data !== false) {
              self.updatedTimeStamp = new Date().getTime();
              self.template = String("<div>" + data.feed_html + "</div>");
              self.setShortcodeGlobalSettings(true);
              self.customizerFeedData.settings = data.customizerDataSettings;
              self.processNotification("previewUpdated");
            } else {
              self.processNotification("unkownError");
            }
          });
          break;
      }
    },
    /**
     * Clear & Reset Color Override
     *
     * @since 4.0
    */
    resetColorOverride: function resetColorOverride(settingID) {
      this.customizerFeedData.settings[settingID] = '';
    },
    /**
     * View Feed Instances
     *
     * @since 4.0
     */
    viewFeedInstances: function viewFeedInstances(feed) {
      var self = this;
      self.viewsActive.instanceFeedActive = feed;
      self.movePopUp();
      Builder.$forceUpdate();
    },
    processDomList: function processDomList(selector, attributes) {
      document.querySelectorAll(selector).forEach(function (element) {
        attributes.map(function (attrName) {
          element.setAttribute(attrName[0], attrName[1]);
        });
      });
    },
    openTooltipBig: function openTooltipBig() {
      var self = this,
        elem = window.event.currentTarget;
      self.processDomList('.sbc-fb-onbrd-tltp-elem', [['data-active', 'false']]);
      elem.querySelector('.sbc-fb-onbrd-tltp-elem').setAttribute('data-active', 'true');
      Builder.$forceUpdate();
    },
    closeTooltipBig: function closeTooltipBig() {
      var self = this;
      self.processDomList('.sbc-fb-onbrd-tltp-elem', [['data-active', 'false']]);
      window.event.stopPropagation();
      Builder.$forceUpdate();
    },
    movePopUp: function movePopUp() {
      var overlay = document.querySelectorAll("sb-fs-boss");
      if (overlay.length > 0) {
        document.getElementById("wpbody-content").prepend(overlay[0]);
      }
    },
    checkObjectArrayElement: function checkObjectArrayElement(objectArray, object, byWhat) {
      var objectResult = objectArray.filter(function (elem) {
        return elem[byWhat] == object[byWhat];
      });
      return objectResult.length > 0 ? true : false;
    },
    getModerationShoppableMode: function getModerationShoppableMode() {
      if (this.viewsActive.moderationMode || this.customizerScreens.activeSection == 'settings_shoppable_feed') {
        this.moderationShoppableMode = true;
      } else {
        this.moderationShoppableMode = false;
      }
      return this.moderationShoppableMode;
    },
    getModerationShoppableModeOffset: function getModerationShoppableModeOffset() {
      return this.moderationShoppableModeOffset > 0;
    },
    formatSubscriberCount: function formatSubscriberCount(strings) {
      console.log(strings);
    },
    hasFeature: function hasFeature(feature_name) {
      var self = this;
      return self.license_tier_features.includes(feature_name);
    }
  });
  var extraData = _objectSpread(_objectSpread({}, customizer.extraData), {}, (_objectSpread2 = {
    $parent: _this,
    nonce: sbc_builder.nonce,
    template: sbc_builder.feedInitOutput,
    freeCtaShowFeatures: false,
    upgradeUrl: sbc_builder.upgradeUrl,
    supportPageUrl: sbc_builder.supportPageUrl,
    pluginURL: sbc_builder.pluginURL,
    builderUrl: sbc_builder.builderUrl,
    pluginType: sbc_builder.pluginType,
    genericText: sbc_builder.genericText,
    sourcesScreenText: sbc_builder.sourcesScreenText,
    apiKeyPopupScreen: sbc_builder.apiKeyPopupScreen,
    selectTemplate: sbc_builder.selectTemplate,
    ajaxHandler: sbc_builder.ajaxHandler,
    adminPostURL: sbc_builder.adminPostURL,
    welcomeScreen: sbc_builder.welcomeScreen,
    svgIcons: sbc_builder.svgIcons,
    license_tier_features: sbc_builder.license_tier_features,
    customizerFeedDataInitial: null,
    customizerFeedData: sbc_builder.customizerFeedData,
    customizerHeaderData: sbc_builder.headerData,
    iscustomizerScreen: sbc_builder.customizerFeedData != undefined && sbc_builder.customizerFeedData != false,
    selectFeedTypeScreen: sbc_builder.selectFeedTypeScreen,
    customizerSidebarBuilder: sbc_builder.customizerSidebarBuilder,
    feedTypes: sbc_builder.feedTypes,
    advancedFeedTypes: sbc_builder.advancedFeedTypes,
    extensionsPopup: sbc_builder.extensionsPopup,
    apiKeyStatus: sbc_builder.apiKeyStatus,
    connectedAccountStatus: sbc_builder.connectedAccountStatus,
    sbyAPIKey: null,
    apiKeyBtnLoader: false,
    apiKeyError: false,
    accessTokenError: false,
    feedStyle: '',
    isCreateProcessGood: false,
    socialWallActivated: sbc_builder.pluginsInfo.social_wall.activated,
    licenseKey: sbc_builder.licenseKey,
    sbyIsPro: sbc_builder.sbyIsPro === '1',
    sbyLicenseNoticeActive: sbc_builder.sbyLicenseNoticeActive === '1',
    sbyLicenseInactiveState: sbc_builder.sbyLicenseInactiveState === '1',
    socialWallAdminPage: sbc_builder.pluginsInfo.social_wall.settingsPage,
    recheckLicenseStatus: null,
    customizerScreens: {
      activeTab: 'customize',
      printedType: {},
      printedTemplate: {},
      activeSection: null,
      previewScreen: 'desktop',
      sourceExpanded: null,
      sourcesChoosed: [],
      inputNameWidth: '0px',
      activeSectionData: null,
      parentActiveSection: null,
      //For nested Setions
      parentActiveSectionData: null,
      //For nested Setions
      activeColorPicker: null
    },
    previewScreens: ['desktop', 'tablet', 'mobile'],
    nestedStylingSection: ['playicon_styling_title', 'video_styling_title', 'user_styling_title', 'views_styling_title', 'countdown_styling_title', 'stats_styling_title', 'date_styling_title', 'description_styling_title'],
    embedPopupScreen: sbc_builder.embedPopupScreen,
    customizeScreensText: sbc_builder.customizeScreens,
    highLightedSection: 'all',
    dummyLightBoxScreen: false,
    dialogBoxPopupScreen: sbc_builder.dialogBoxPopupScreen,
    selectFeedTemplateScreen: sbc_builder.selectFeedTemplateScreen,
    shouldShowFeedAPIBackBtn: false,
    dialogBox: {
      active: false,
      type: null,
      //deleteSourceCustomizer
      heading: null,
      description: null,
      customButtons: undefined
    },
    sourceToDelete: {},
    viewsActive: {
      //Screens where the footer widget is disabled
      footerDiabledScreens: ['welcome', 'selectFeed'],
      footerWidget: false,
      // welcome, selectFeed
      pageScreen: 'welcome',
      // feedsType, selectSource, feedsTypeGetProcess
      selectedFeedSection: 'feedsType',
      manualSourcePopupInit: sbc_builder.manualSourcePopupInit,
      sourcePopup: false,
      feedtypesPopup: false,
      feedtemplatesPopup: false,
      feedTemplateElement: null,
      feedtypesCustomizerPopup: false,
      sourcesListPopup: false,
      // step_1 [Add New Source] , step_2 [Connect to a user pages/groups], step_3 [Add Manually]
      sourcePopupScreen: 'redirect_1',
      extensionsPopupElement: false,
      // creation or customizer
      sourcePopupType: 'creation',
      accountAPIPopup: false,
      instanceFeedActive: null,
      clipboardCopiedNotif: false,
      legacyFeedsShown: false,
      editName: false,
      embedPopup: false,
      embedPopupScreen: 'step_1',
      embedPopupSelectedPage: null,
      // onboarding
      onboardingPopup: sbc_builder.allFeedsScreen.onboarding.active,
      onboardingStep: 1,
      licenseLearnMore: false,
      whyRenewLicense: false,
      // customizer onboarding
      onboardingCustomizerPopup: sbc_builder.customizeScreens.onboarding.active,
      // plugin install popup
      installPluginPopup: false,
      installPluginModal: 'facebook'
    },
    wordpressPageLists: sbc_builder.wordpressPageLists,
    widgetsPageURL: sbc_builder.widgetsPageURL,
    feedTemplates: sbc_builder.feedTemplates,
    selectedBulkAction: false,
    selectedFeed: 'channel',
    selectedFeedPopup: [],
    // Selected Feed Template
    selectedFeedTemplate: 'default',
    feedsSelected: []
  }, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_objectSpread2, "extensionsPopup", sbc_builder.extensionsPopup), "tooltip", {
    text: '',
    hover: false,
    hoverType: 'outside'
  }), "activeExtensionsFull", sbc_builder.activeExtensions), "activeExtensions", []), "inActiveExtensions", []), "fullScreenLoader", false), "appLoaded", false), "previewLoaded", false), "loadingBar", true), "licenseBtnClicked", false), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_objectSpread2, "notificationElement", {
    type: 'success',
    // success, error, warning, message
    text: '',
    shown: null
  }), "feedPagination", {
    feedsCount: sbc_builder.feedsCount != undefined ? sbc_builder.feedsCount : null,
    pagesNumber: 1,
    currentPage: 1,
    itemsPerPage: sbc_builder.itemsPerPage != undefined ? sbc_builder.itemsPerPage : null
  }), "sw_feed", false), "sw_feed_id", false)));
  Vue.component(dummyLightBoxComponent, {
    template: '#' + dummyLightBoxComponent,
    props: ['customizerFeedData', 'parent', 'dummyLightBoxScreen', 'customizerHeaderData']
  });

  /**
   * VueJS Global App Builder
   *
   * @since 4.0
   */
  Builder = new Vue({
    el: '#sbc-builder-app',
    http: {
      emulateJSON: true,
      emulateHTTP: true
    },
    components: {
      'sketch-picker': sketch
    },
    mixins: [VueClickaway.mixin],
    data: extraData,
    updated: function updated() {
      var self = this;
      if (self.iscustomizerScreen) {
        this.setShortcodeGlobalSettings(true);
      }
    },
    computed: {
      feedStyleOutput: function feedStyleOutput() {
        return this.customizerStyleMaker();
      }
    },
    created: function created() {
      var _this3 = this;
      var self = this;
      var urlParams = new URLSearchParams(window.location.search);
      // get the socail wall link feed url params
      self.sw_feed = urlParams.get('sw-feed');
      self.sw_feed_id = urlParams.get('sw-feed-id');
      setTimeout(function () {
        var queryString = window.location.search,
          urlParams = new URLSearchParams(queryString),
          page = urlParams.get('page'),
          sby_access_token = urlParams.get('sby_access_token'),
          sby_refresh_token = urlParams.get('sby_refresh_token');
        self.loadingBar = false;
        _this3.$parent = self;
        if (self.customizerFeedData) {
          self.customizerFeedDataInitial = JSON.parse(JSON.stringify(self.customizerFeedData));
        }
        if (self.customizerFeedData == undefined) {
          self.feedPagination.pagesNumber = self.feedPagination.feedsCount != null ? Math.ceil(self.feedPagination.feedsCount / self.feedPagination.itemsPerPage) : 1;
        }

        // check if access token is available on the feed builder page then switch the screen
        if (page == 'sby-feed-builder' && sby_access_token && sby_refresh_token) {
          self.switchScreen('pageScreen', 'selectFeed');
          self.switchScreen('selectedFeedSection', 'selectSource');
        }
        self.activeExtensionsFull.map(function (element) {
          return self.activeExtensions[element['type']] = element['active'];
        });
        self.activeExtensionsFull.map(function (element) {
          if (element['active'] == false) {
            element['ids'].forEach(function (id) {
              self.inActiveExtensions[id] = element['type'];
            });
          }
        });
        /* Onboarding - move elements so the position is in context */
        self.positionOnboarding();
        document.querySelector('#sbc-builder-app').classList.add('initialized');
      }, 100);
    },
    methods: extraMethods
  });
});
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,