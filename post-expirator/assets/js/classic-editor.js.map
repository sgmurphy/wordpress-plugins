{"version":3,"file":"classic-editor.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/ButtonsPanel.jsx","webpack://post-expirator/./assets/jsx/components/CheckboxControl.jsx","webpack://post-expirator/./assets/jsx/components/DateTimePicker.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBlockEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBulkEdit.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelClassicEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelQuickEdit.jsx","webpack://post-expirator/./assets/jsx/components/NonceControl.jsx","webpack://post-expirator/./assets/jsx/components/PostTypeSettingsPanel.jsx","webpack://post-expirator/./assets/jsx/components/PostTypesSettingsPanels.jsx","webpack://post-expirator/./assets/jsx/components/SelectControl.jsx","webpack://post-expirator/./assets/jsx/components/SettingRow.jsx","webpack://post-expirator/./assets/jsx/components/SettingsFieldset.jsx","webpack://post-expirator/./assets/jsx/components/SettingsForm.jsx","webpack://post-expirator/./assets/jsx/components/SettingsSection.jsx","webpack://post-expirator/./assets/jsx/components/SettingsTable.jsx","webpack://post-expirator/./assets/jsx/components/SubmitButton.jsx","webpack://post-expirator/./assets/jsx/components/TextControl.jsx","webpack://post-expirator/./assets/jsx/components/ToggleArrowButton.jsx","webpack://post-expirator/./assets/jsx/components/ToggleCalendarDatePicker.jsx","webpack://post-expirator/./assets/jsx/components/TokensControl.jsx","webpack://post-expirator/./assets/jsx/components/TrueFalseControl.jsx","webpack://post-expirator/./assets/jsx/components/index.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/external var \"ReactDOM\"","webpack://post-expirator/external var \"publishpressFutureClassicEditorConfig\"","webpack://post-expirator/external var \"wp\"","webpack://post-expirator/external var \"wp.components\"","webpack://post-expirator/external var \"wp.data\"","webpack://post-expirator/external var \"wp.element\"","webpack://post-expirator/external var \"wp.hooks\"","webpack://post-expirator/external var \"wp.url\"","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/classic-editor.jsx"],"sourcesContent":["/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const ButtonsPanel = function (props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment, useState  } from \"&wp.element\";\nimport { CheckboxControl as WPCheckboxControl } from \"&wp.components\";\n\nexport const CheckboxControl = function (props) {\n    const [checked, setChecked] = useState(props.checked || false);\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        setChecked(value);\n\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPCheckboxControl\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                checked={checked || false}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","import { normalizeUnixTimeToMilliseconds } from \"../time\";\nimport { DateTimePicker as WPDateTimePicker } from \"&wp.components\";\n\n\nexport const DateTimePicker = ({currentDate, onChange, is12Hour, startOfWeek}) => {\n    if (typeof currentDate === 'number') {\n        currentDate = normalizeUnixTimeToMilliseconds(currentDate);\n    }\n\n    return (\n        <WPDateTimePicker\n            currentDate={currentDate}\n            onChange={onChange}\n            __nextRemoveHelpButton={true}\n            is12Hour={is12Hour}\n            startOfWeek={startOfWeek}\n        />\n    )\n}\n","import { compact } from '../utils';\nimport { ToggleCalendarDatePicker } from './ToggleCalendarDatePicker';\n\nconst { PanelRow, CheckboxControl, SelectControl, FormTokenField, Spinner, BaseControl } = wp.components;\nconst { Fragment, useEffect } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nexport const FutureActionPanel = (props) => {\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select(props.storeName).getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select(props.storeName).getTermsListByName(), []);\n    const termsListById = useSelect((select) => select(props.storeName).getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select(props.storeName).getIsFetchingTerms(), []);\n    const calendarIsVisible = useSelect((select) => select(props.storeName).getCalendarIsVisible(), []);\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms,\n        setCalendarIsVisible\n    } = useDispatch(props.storeName);\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const insertTerm = (term) => {\n        termsListByName[term] = {id: term, count: 0, description: \"\", link: \"\", name: term, slug: term, taxonomy: taxonomy};\n        termsListById[term] = term;\n        setTermsListByName(termsListByName);\n        setTermsListById(termsListById);\n        setTerms([...terms, term]);\n\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            if (termsListByName[term]) {\n                return termsListByName[term].id;\n            }\n\n            insertTerm(term);\n\n            return term;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleDateChange = (value) => {\n        setDate(value);\n\n        callOnChangeData('date', value);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        if (!taxonomy) {\n            return;\n        }\n\n        setIsFetchingTerms(true);\n\n        apiFetch({\n            path: addQueryArgs(`publishpress-future/v1/terms/${taxonomy}`),\n        }).then((result) => {\n            result.terms.forEach(term => {\n                termsListByName[decodeEntities(term.name)] = term;\n                termsListById[term.id] = decodeEntities(term.name);\n            });\n\n            setTermsListByName(termsListByName);\n            setTermsListById(termsListById);\n            setTaxonomyName(decodeEntities(result.taxonomyName));\n            setIsFetchingTerms(false);\n        });\n    }\n\n    const storeCalendarIsVisibleOnStorage = (value) => {\n        localStorage.setItem('FUTURE_ACTION_CALENDAR_IS_VISIBLE_' + props.context, value ? '1' : '0');\n    }\n\n    const getCalendarIsVisibleFromStorage = () => {\n        return localStorage.getItem('FUTURE_ACTION_CALENDAR_IS_VISIBLE_' + props.context);\n    }\n\n    useEffect(() => {\n        if (props.autoEnableAndHideCheckbox)  {\n            setEnabled(true);\n        } else {\n            setEnabled(props.enabled);\n        }\n\n        setAction(props.action);\n        setDate(props.date);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        if (getCalendarIsVisibleFromStorage() === null) {\n            setCalendarIsVisible(props.calendarIsVisible);\n        } else {\n            setCalendarIsVisible(getCalendarIsVisibleFromStorage() === '1');\n        }\n\n        // We need to get the value directly from the props because the value from the store is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                // Force populate the default values\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    useEffect(() => {\n        storeCalendarIsVisibleOnStorage(calendarIsVisible);\n    }, [calendarIsVisible]);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    const panelClass = calendarIsVisible ? 'future-action-panel' : 'future-action-panel hidden-calendar';\n    const contentPanelClass = calendarIsVisible ? 'future-action-panel-content' : 'future-action-panel-content hidden-calendar';\n    const datePanelClass = calendarIsVisible ? 'future-action-date-panel' : 'future-action-date-panel hidden-calendar';\n\n    let is24hour;\n    if (props.timeFormat === 'inherited') {\n        is24hour = ! props.is12Hour;\n    } else {\n        is24hour = props.timeFormat === '24h';\n    }\n\n\n    const replaceCurlyBracketsWithLink = (string, href, target) => {\n        const parts = string.split('{');\n        const result = [];\n\n        result.push(parts.shift());\n\n        for (const part of parts) {\n            const [before, after] = part.split('}');\n\n            result.push(\n                <a href={href} target={target} key={href}>{before}</a>\n            );\n\n            result.push(after);\n        }\n\n        return result;\n    };\n\n    // Remove items from actions list if related to taxonomies and there is no taxonmoy for the post type\n    let actionsSelectOptions = props.actionsSelectOptions;\n    if (! props.taxonomy) {\n        actionsSelectOptions = props.actionsSelectOptions.filter((item) => {\n            return ['category', 'category-add', 'category-remove', 'category-remove-all'].indexOf(item.value) === -1;\n        });\n    }\n\n    const HelpText = replaceCurlyBracketsWithLink(props.strings.timezoneSettingsHelp, '/wp-admin/options-general.php#timezone_string', '_blank');\n    const displayTaxonomyField = String(action).includes('category') && action !== 'category-remove-all';\n\n    return (\n        <div className={panelClass}>\n            {props.autoEnableAndHideCheckbox && (\n                <input type=\"hidden\" name={'future_action_enabled'} value={1} />\n            )}\n\n            {! props.autoEnableAndHideCheckbox && (\n                <PanelRow>\n                    <CheckboxControl\n                        label={props.strings.enablePostExpiration}\n                        checked={enabled || false}\n                        onChange={handleEnabledChange}\n                    />\n                </PanelRow>\n            )}\n\n            {enabled && (\n                <Fragment>\n                    <PanelRow className={contentPanelClass + ' future-action-full-width'}>\n                        <SelectControl\n                            label={props.strings.action}\n                            value={action}\n                            options={actionsSelectOptions}\n                            onChange={handleActionChange}\n                        />\n                    </PanelRow>\n\n                    {\n                        displayTaxonomyField && (\n                            isFetchingTerms && (\n                                <PanelRow>\n                                    <BaseControl label={taxonomyName}>\n                                        {`${props.strings.loading} (${taxonomyName})`}\n                                        <Spinner />\n                                    </BaseControl>\n                                </PanelRow>\n                            )\n                            || (!taxonomy && (\n                                <PanelRow>\n                                    <BaseControl label={taxonomyName} className=\"future-action-warning\">\n                                        <div>\n                                            <i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}\n                                        </div>\n                                    </BaseControl>\n                                </PanelRow>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <PanelRow>\n                                            <BaseControl label={taxonomyName} className=\"future-action-warning\">\n                                                <div>\n                                                    <i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}\n                                                </div>\n                                            </BaseControl>\n                                        </PanelRow>\n                                    )\n                                    || (\n                                        <PanelRow className=\"future-action-full-width\">\n                                            <BaseControl>\n                                                <FormTokenField\n                                                    label={taxonomyName}\n                                                    value={selectedTerms}\n                                                    suggestions={termsListByNameKeys}\n                                                    onChange={handleTermsChange}\n                                                    maxSuggestions={1000}\n                                                    __experimentalExpandOnFocus={true}\n                                                    __experimentalAutoSelectFirstMatch={true}\n                                                />\n                                            </BaseControl>\n                                        </PanelRow>\n                                    )\n                                )\n                            )\n                        )\n                    }\n\n                    <PanelRow className={datePanelClass}>\n                        <ToggleCalendarDatePicker\n                            currentDate={date}\n                            onChangeDate={handleDateChange}\n                            onToggleCalendar={() => setCalendarIsVisible(!calendarIsVisible)}\n                            is12Hour={!is24hour}\n                            startOfWeek={props.startOfWeek}\n                            isExpanded={calendarIsVisible}\n                            strings={props.strings}\n                        />\n                    </PanelRow>\n\n                    <PanelRow>\n                        <div className=\"future-action-help-text\">\n                            <hr />\n\n                            <span className=\"dashicons dashicons-info\"></span> {HelpText}\n                        </div>\n                    </PanelRow>\n                </Fragment>\n            )}\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\n\nexport const FutureActionPanelBlockEditor = (props) => {\n    const { PluginDocumentSettingPanel } = wp.editPost;\n    const { useDispatch, select } = wp.data;\n\n    const { editPost } = useDispatch('core/editor');\n\n    const editPostAttribute = (newAttribute) => {\n        const attribute = {\n            publishpress_future_action: {}\n        };\n\n        // For each property on newAttribute, set the value on attribute\n        for (const [name, value] of Object.entries(newAttribute)) {\n            attribute.publishpress_future_action[name] = value;\n        }\n\n        editPost(attribute);\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        const newAttribute = {\n            'enabled': store.getEnabled()\n        }\n\n        if (newAttribute.enabled) {\n            newAttribute['action'] = store.getAction();\n            newAttribute['date'] = store.getDate();\n            newAttribute['terms'] = store.getTerms();\n            newAttribute['taxonomy'] = store.getTaxonomy();\n        }\n\n        editPostAttribute(newAttribute);\n    }\n\n    const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n    return (\n        <PluginDocumentSettingPanel\n            name={'publishpress-future-action-panel'}\n            title={props.strings.panelTitle}\n            icon=\"calendar\"\n            initialOpen={props.postTypeDefaultConfig.autoEnable}\n            className={'post-expirator-panel'}>\n            <div id='publishpress-future-block-editor'>\n                <FutureActionPanel\n                    context={'block-editor'}\n                    postType={props.postType}\n                    isCleanNewPost={props.isCleanNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    enabled={data.enabled}\n                    calendarIsVisible={true}\n                    action={data.action}\n                    date={data.date}\n                    terms={data.terms}\n                    taxonomy={data.taxonomy}\n                    taxonomyName={props.taxonomyName}\n                    onChangeData={onChangeData}\n                    is12Hour={props.is12Hour}\n                    timeFormat={props.timeFormat}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings} />\n            </div>\n        </PluginDocumentSettingPanel>\n    );\n};\n","import { FutureActionPanel, SelectControl } from '.';\nimport { getElementByName } from '../utils';\n\nexport const FutureActionPanelBulkEdit = (props) => {\n    const { useSelect, useDispatch, select } = wp.data;\n\n    const onChangeData = (attribute, value) => {\n        getElementByName('future_action_bulk_enabled').value = select(props.storeName).getEnabled() ? 1 : 0;\n        getElementByName('future_action_bulk_action').value = select(props.storeName).getAction();\n        getElementByName('future_action_bulk_date').value = select(props.storeName).getDate();\n        getElementByName('future_action_bulk_terms').value = select(props.storeName).getTerms().join(',');\n        getElementByName('future_action_bulk_taxonomy').value = select(props.storeName).getTaxonomy();\n    }\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const changeAction = useSelect((select) => select(props.storeName).getChangeAction(), []);\n\n    const {\n        setChangeAction\n    } = useDispatch(props.storeName);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    const handleStrategyChange = (value) => {\n        setChangeAction(value);\n    };\n\n    const options = [\n        { value: 'no-change', label: props.strings.noChange },\n        { value: 'change-add', label: props.strings.changeAdd },\n        { value: 'add-only', label: props.strings.addOnly },\n        { value: 'change-only', label: props.strings.changeOnly },\n        { value: 'remove-only', label: props.strings.removeOnly },\n    ];\n\n    const optionsToDisplayPanel = ['change-add', 'add-only', 'change-only'];\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <SelectControl\n                label={props.strings.futureActionUpdate}\n                name={'future_action_bulk_change_action'}\n                value={changeAction}\n                options={options}\n                onChange={handleStrategyChange}\n            />\n\n            {optionsToDisplayPanel.includes(changeAction) && (\n                <FutureActionPanel\n                    context={'bulk-edit'}\n                    autoEnableAndHideCheckbox={true}\n                    postType={props.postType}\n                    isCleanNewPost={props.isNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    enabled={true}\n                    calendarIsVisible={false}\n                    action={action}\n                    date={date}\n                    terms={terms}\n                    taxonomy={taxonomy}\n                    taxonomyName={props.taxonomyName}\n                    onChangeData={onChangeData}\n                    is12Hour={props.is12Hour}\n                    timeFormat={props.timeFormat}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings} />\n            )}\n\n            {/* Bulk edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_bulk_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_bulk_action'} value={action} />\n            <input type=\"hidden\" name={'future_action_bulk_date'} value={date} />\n            <input type=\"hidden\" name={'future_action_bulk_terms'} value={termsString} />\n            <input type=\"hidden\" name={'future_action_bulk_taxonomy'} value={taxonomy} />\n            <input type=\"hidden\" name={'future_action_bulk_view'} value=\"bulk-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from \"./\";\nimport { select } from \"&wp.data\";\n\nexport const FutureActionPanelClassicEditor = (props) => {\n    const browserTimezoneOffset = new Date().getTimezoneOffset();\n\n    const getElementByName = (name) => {\n        return document.getElementsByName(name)[0];\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        getElementByName('future_action_enabled').value = store.getEnabled() ? 1 : 0;\n        getElementByName('future_action_action').value = store.getAction();\n        getElementByName('future_action_date').value = store.getDate();\n        getElementByName('future_action_terms').value = store.getTerms().join(',');\n        getElementByName('future_action_taxonomy').value = store.getTaxonomy();\n    }\n\n    const getTermsFromElementByName = (name) => {\n        const element = getElementByName(name);\n        if (!element) {\n            return [];\n        }\n\n        let terms = element.value.split(',');\n\n        if (terms.length === 1 && terms[0] === '') {\n            terms = [];\n        }\n\n        return terms.map(term => parseInt(term));\n    }\n\n    const getElementValueByName = (name) => {\n        const element = getElementByName(name);\n        if (!element) {\n            return '';\n        }\n\n        return element.value;\n    }\n\n    const data = {\n        enabled: getElementValueByName('future_action_enabled') === '1',\n        action: getElementValueByName('future_action_action'),\n        date: getElementValueByName('future_action_date'),\n        terms: getTermsFromElementByName('future_action_terms'),\n        taxonomy: getElementValueByName('future_action_taxonomy'),\n    };\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                context={'classic-editor'}\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={data.enabled}\n                calendarIsVisible={true}\n                action={data.action}\n                date={data.date}\n                terms={data.terms}\n                taxonomy={data.taxonomy}\n                taxonomyName={props.taxonomyName}\n                onChangeData={onChangeData}\n                is12Hour={props.is12Hour}\n                timeFormat={props.timeFormat}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\nimport { useSelect } from '&wp.data';\n\nexport const FutureActionPanelQuickEdit = (props) => {\n    const onChangeData = (attribute, value) => {};\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                context={'quick-edit'}\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={enabled}\n                calendarIsVisible={false}\n                action={action}\n                date={date}\n                terms={terms}\n                taxonomy={taxonomy}\n                taxonomyName={props.taxonomyName}\n                onChangeData={onChangeData}\n                is12Hour={props.is12Hour}\n                timeFormat={props.timeFormat}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n\n            {/* Quick edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_action'} value={action ? action : ''} />\n            <input type=\"hidden\" name={'future_action_date'} value={date ? date : ''} />\n            <input type=\"hidden\" name={'future_action_terms'} value={termsString ? termsString : ''} />\n            <input type=\"hidden\" name={'future_action_taxonomy'} value={taxonomy ? taxonomy : ''} />\n            <input type=\"hidden\" name={'future_action_view'} value=\"quick-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\n\nexport const NonceControl = function (props) {\n    if (! props.name) {\n        props.name = '_wpnonce';\n    }\n\n    if (! props.referrer) {\n        props.referrer = true;\n    }\n\n    return (\n        <Fragment>\n            <input type=\"hidden\" name={props.name} id={props.name} value={props.nonce} />\n\n            {props.referrer &&\n                <input type=\"hidden\" name=\"_wp_http_referer\" value={props.referrer}/>\n            }\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport {\n    SettingRow,\n    SettingsFieldset,\n    SettingsTable,\n    SelectControl,\n    TextControl,\n    TokensControl,\n    CheckboxControl\n} from './';\nimport { useEffect, useState } from '&wp.element';\nimport { addQueryArgs } from '&wp.url';\nimport { applyFilters } from '&wp.hooks';\nimport { apiFetch } from '&wp';\n\nexport const PostTypeSettingsPanel = function (props) {\n    const [postTypeTaxonomy, setPostTypeTaxonomy] = useState(props.settings.taxonomy);\n    const [termOptions, setTermOptions] = useState([]);\n    const [termsSelectIsLoading, setTermsSelectIsLoading] = useState(false);\n    const [selectedTerms, setSelectedTerms] = useState([]);\n    const [settingHowToExpire, setSettingHowToExpire] = useState(props.settings.howToExpire);\n    const [isActive, setIsActive] = useState(props.settings.active);\n    const [expireOffset, setExpireOffset] = useState(props.settings.defaultExpireOffset);\n    const [emailNotification, setEmailNotification] = useState(props.settings.emailNotification);\n    const [isAutoEnabled, setIsAutoEnabled] = useState(props.settings.autoEnabled);\n\n    const onChangeTaxonomy = function (value) {\n        setPostTypeTaxonomy(value);\n    };\n\n    const onChangeTerms = (value) => {\n        setSelectedTerms(value);\n    };\n\n    const onChangeHowToExpire = (value) => {\n        setSettingHowToExpire(value);\n    }\n\n    const onChangeActive = (value) => {\n        setIsActive(value);\n    }\n\n    const onChangeExpireOffset = (value) => {\n        setExpireOffset(value);\n    }\n\n    const onChangeEmailNotification = (value) => {\n        setEmailNotification(value);\n    }\n\n    const onChangeAutoEnabled = (value) => {\n        setIsAutoEnabled(value);\n    }\n\n    useEffect(() => {\n        if (!postTypeTaxonomy || !props.taxonomiesList) {\n            return;\n        }\n\n        setTermsSelectIsLoading(true);\n        apiFetch({\n            path: addQueryArgs(`publishpress-future/v1/terms/${postTypeTaxonomy}`),\n        }).then((result) => {\n            let options = [];\n\n            let settingsTermsOptions = null;\n            let option;\n\n            result.terms.forEach(term => {\n                option = { value: term.id, label: term.name };\n                options.push(option);\n\n                if (postTypeTaxonomy === props.settings.taxonomy && props.settings.terms.includes(term.id)) {\n                    if (settingsTermsOptions === null) {\n                        settingsTermsOptions = [];\n                    }\n\n                    settingsTermsOptions.push(option.label);\n                }\n            });\n\n            setTermOptions(options);\n            setSelectedTerms(settingsTermsOptions);\n            setTermsSelectIsLoading(false);\n        });\n    }, [postTypeTaxonomy]);\n\n    const termOptionsLabels = termOptions.map((term) => term.label);\n\n    let settingsRows = [\n        <SettingRow label={props.text.fieldActive} key={'expirationdate_activemeta-' + props.postType}>\n            <CheckboxControl\n                name={'expirationdate_activemeta-' + props.postType}\n                checked={isActive || false}\n                label={props.text.fieldActiveLabel}\n                onChange={onChangeActive}\n            />\n        </SettingRow>\n    ];\n\n    if (isActive) {\n        settingsRows.push(\n            <SettingRow label={props.text.fieldAutoEnable} key={'expirationdate_autoenable-' + props.postType}>\n                <CheckboxControl\n                    name={'expirationdate_autoenable-' + props.postType}\n                    checked={isAutoEnabled || false}\n                    label={props.text.fieldAutoEnableLabel}\n                    onChange={onChangeAutoEnabled}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldTaxonomy} key={'expirationdate_taxonomy-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_taxonomy-' + props.postType}\n                    options={props.taxonomiesList}\n                    selected={postTypeTaxonomy}\n                    noItemFoundMessage={props.text.noItemsfound}\n                    description={props.text.fieldTaxonomyDescription}\n                    data={props.postType}\n                    onChange={onChangeTaxonomy}\n                >\n                </SelectControl>\n            </SettingRow>\n        );\n\n        // Remove items from expireTypeList if related to taxonomies and there is no taxonmoy for the post type\n        if (props.taxonomiesList.length === 0) {\n            props.expireTypeList[props.postType] = props.expireTypeList[props.postType].filter((item) => {\n                return ['category', 'category-add', 'category-remove'].indexOf(item.value) === -1;\n            });\n        }\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldHowToExpire} key={'expirationdate_expiretype-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_expiretype-' + props.postType}\n                    className={'pe-howtoexpire'}\n                    options={props.expireTypeList[props.postType]}\n                    description={props.text.fieldHowToExpireDescription}\n                    selected={settingHowToExpire}\n                    onChange={onChangeHowToExpire}\n                />\n\n                {(props.taxonomiesList.length > 0 && (['category', 'category-add', 'category-remove'].indexOf(settingHowToExpire) > -1)) &&\n                    <TokensControl\n                        label={props.text.fieldTerm}\n                        name={'expirationdate_terms-' + props.postType}\n                        options={termOptionsLabels}\n                        value={selectedTerms}\n                        isLoading={termsSelectIsLoading}\n                        onChange={onChangeTerms}\n                        description={props.text.fieldTermDescription}\n                        maxSuggestions={1000}\n                        expandOnFocus={true}\n                        autoSelectFirstMatch={true}\n                    />\n                }\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldDefaultDateTimeOffset} key={'expired-custom-date-' + props.postType}>\n                <TextControl\n                    name={'expired-custom-date-' + props.postType}\n                    value={expireOffset}\n                    placeholder={props.settings.globalDefaultExpireOffset}\n                    description={props.text.fieldDefaultDateTimeOffsetDescription}\n                    unescapedDescription={true}\n                    onChange={onChangeExpireOffset}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldWhoToNotify} key={'expirationdate_emailnotification-' + props.postType}>\n                <TextControl\n                    name={'expirationdate_emailnotification-' + props.postType}\n                    className=\"large-text\"\n                    value={emailNotification}\n                    description={props.text.fieldWhoToNotifyDescription}\n                    onChange={onChangeEmailNotification}\n                />\n            </SettingRow>\n        );\n    }\n\n    settingsRows = applyFilters('expirationdate_settings_posttype', settingsRows, props, isActive, useState);\n\n    return (\n        <SettingsFieldset legend={props.legend}>\n            <SettingsTable bodyChildren={settingsRows} />\n        </SettingsFieldset>\n    );\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport { PostTypeSettingsPanel } from \"./\";\n\nexport const PostTypesSettingsPanels = function (props) {\n    let panels = [];\n\n    for (const [postType, postTypeSettings] of Object.entries(props.settings)) {\n        panels.push(\n            <PostTypeSettingsPanel\n                legend={postTypeSettings.label}\n                text={props.text}\n                postType={postType}\n                settings={postTypeSettings}\n                expireTypeList={props.expireTypeList}\n                taxonomiesList={props.taxonomiesList[postType]}\n                key={`${postType}-panel`}\n            />\n        );\n    }\n\n    return (panels);\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\nimport { SelectControl as WPSelectControl } from \"&wp.components\";\n\nexport const SelectControl = function (props) {\n    const onChange = (value) => {\n        props.onChange(value);\n    };\n\n    return (\n        <Fragment>\n            {props.options.length === 0 && (\n                <div>{props.noItemFoundMessage}</div>\n            )}\n\n            {props.options.length > 0 && (\n                <WPSelectControl\n                    label={props.label}\n                    name={props.name}\n                    id={props.name}\n                    className={props.className}\n                    value={props.selected}\n                    onChange={onChange}\n                    data-data={props.data}\n                    options={props.options}\n                />\n            )}\n\n            {props.children}\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\n\nexport const SettingRow = function (props) {\n    return (\n        <tr valign=\"top\">\n            <th scope=\"row\">\n                <label htmlFor=\"\">{props.label}</label>\n            </th>\n            <td>\n                {props.children}\n            </td>\n        </tr>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsFieldset = function (props) {\n    return (\n        <fieldset>\n                <legend>{props.legend}</legend>\n                {props.children}\n        </fieldset>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsForm = function (props) {\n    return (\n        <form method=\"post\">\n            {props.children}\n        </form>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\n\nexport const SettingsSection = function (props) {\n    return (\n        <Fragment>\n            <h2>{props.title}</h2>\n            <p>{props.description}</p>\n            {props.children}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsTable = function (props) {\n    return (\n        <table className=\"form-table\">\n            <tbody>\n                {props.bodyChildren}\n            </tbody>\n        </table>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SubmitButton = function (props) {\n    return (\n        <input\n            type=\"submit\"\n            name={props.name}\n            value={props.text}\n            className=\"button-primary\"\n        />\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\nimport { TextControl as WPTextControl } from \"&wp.components\";\n\nexport const TextControl = function (props) {\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPTextControl\n                type=\"text\"\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                value={props.value}\n                placeholder={props.placeholder}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","import { Button } from '&wp.components';\n\nexport const ToggleArrowButton = function (props) {\n    const onClick = function () {\n        if (props.onClick) {\n            props.onClick();\n        }\n    };\n\n    const iconExpanded = props.iconExpanded ? props.iconExpanded : 'arrow-up-alt2';\n    const iconCollapsed = props.iconCollapsed ? props.iconCollapsed : 'arrow-down-alt2';\n\n    const icon = props.isExpanded ? iconExpanded : iconCollapsed;\n\n    const title = props.isExpanded ? props.titleExpanded : props.titleCollapsed;\n\n    return (\n        <Button\n            isSmall\n            title={title}\n            icon={icon}\n            onClick={onClick}\n            className={props.className}\n        />\n    )\n}\n","import { ToggleArrowButton } from \"./ToggleArrowButton\";\nimport { DateTimePicker } from \"./DateTimePicker\";\nimport { Fragment, useEffect } from \"&wp.element\";\n\nexport const ToggleCalendarDatePicker = (\n    {\n        isExpanded,\n        strings,\n        onToggleCalendar,\n        currentDate,\n        onChangeDate,\n        is12Hour,\n        startOfWeek\n    }\n) => {\n    useEffect(() => {\n        // Move the element of the toggle button to between the time and date elements.\n        const toggleButtonElement = document.querySelector('.future-action-calendar-toggle');\n\n        if (! toggleButtonElement) {\n            return;\n        }\n\n        const dateTimeElement = toggleButtonElement.nextElementSibling;\n\n        if (! dateTimeElement) {\n            return;\n        }\n\n        const timeElement = dateTimeElement.querySelector('.components-datetime__time');\n\n        if (! timeElement) {\n            return;\n        }\n\n        const dateElement = timeElement.nextSibling;\n\n        if (! dateElement) {\n            return;\n        }\n\n        dateTimeElement.insertBefore(toggleButtonElement, dateElement)\n    });\n\n    return (\n        <Fragment>\n            <ToggleArrowButton\n                className=\"future-action-calendar-toggle\"\n                isExpanded={isExpanded}\n                iconExpanded=\"arrow-up-alt2\"\n                iconCollapsed=\"calendar\"\n                titleExpanded={strings.hideCalendar}\n                titleCollapsed={strings.showCalendar}\n                onClick={onToggleCalendar} />\n\n            <DateTimePicker\n                currentDate={currentDate}\n                onChange={onChangeDate}\n                __nextRemoveHelpButton={true}\n                is12Hour={is12Hour}\n                startOfWeek={startOfWeek}\n            />\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment, useState, useEffect } from \"&wp.element\";\nimport { FormTokenField } from \"&wp.components\";\n\nexport const TokensControl = (props) => {\n    const [stringValue, setStringValue] = useState('');\n\n    useEffect(() => {\n        if (props.value) {\n            setStringValue(props.value.join(','));\n        }\n    }, [props.value]);\n\n    let description;\n\n    if (props.description) {\n        if (props.unescapedDescription) {\n            // If using this option, the HTML has to be escaped before injected into the JS interface.\n            description = <p className=\"description\" dangerouslySetInnerHTML={{__html: props.description}}></p>;\n        } else {\n            description = <p className=\"description\">{props.description}</p>;\n        }\n    }\n\n    const onChange = (value) => {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n\n        if (typeof value === 'object') {\n            setStringValue(value.join(','));\n        } else {\n            setStringValue('');\n        }\n    }\n\n    const value = props.value ? props.value : [];\n \n    return (\n        <Fragment>\n            <FormTokenField\n                label={props.label}\n                value={value}\n                suggestions={props.options}\n                onChange={onChange}\n                maxSuggestions={props.maxSuggestions}\n                className=\"publishpres-future-token-field\"\n                __experimentalExpandOnFocus={props.expandOnFocus}\n                __experimentalAutoSelectFirstMatch={props.autoSelectFirstMatch}\n            />\n            <input type=\"hidden\" name={props.name} value={stringValue} />\n\n            {description}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TrueFalseControl = function (props) {\n    const { Fragment } = wp.element;\n\n    const onChange = (e) => {\n        if (props.onChange) {\n            props.onChange(\n                e.target.value === props.trueValue && jQuery(e.target).is(':checked')\n            );\n            // Check only the true radio... using the field name? or directly the ID\n        }\n    };\n\n    return (\n        <Fragment>\n            <input\n                type=\"radio\"\n                name={props.name}\n                id={props.name + '-true'}\n                value={props.trueValue}\n                defaultChecked={props.selected}\n                onChange={onChange}\n            />\n\n            <label htmlFor={props.name + '-true'}>{props.trueLabel}</label>\n            &nbsp;&nbsp;\n            <input\n                type=\"radio\"\n                name={props.name}\n                defaultChecked={!props.selected}\n                id={props.name + '-false'}\n                value={props.falseValue}\n                onChange={onChange}\n            />\n            <label\n                htmlFor={props.name + '-false'}>{props.falseLabel}</label>\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","export { ButtonsPanel } from \"./ButtonsPanel\";\nexport { FutureActionPanel } from \"./FutureActionPanel\";\nexport { FutureActionPanelBlockEditor } from \"./FutureActionPanelBlockEditor\";\nexport { FutureActionPanelClassicEditor } from \"./FutureActionPanelClassicEditor\";\nexport { FutureActionPanelQuickEdit } from \"./FutureActionPanelQuickEdit\";\nexport { FutureActionPanelBulkEdit } from \"./FutureActionPanelBulkEdit\";\nexport { PostTypeSettingsPanel } from \"./PostTypeSettingsPanel\";\nexport { PostTypesSettingsPanels } from \"./PostTypesSettingsPanels\";\nexport { SettingRow } from \"./SettingRow\";\nexport { SettingsFieldset } from \"./SettingsFieldset\";\nexport { SettingsForm } from \"./SettingsForm\";\nexport { SettingsSection } from \"./SettingsSection\";\nexport { SettingsTable } from \"./SettingsTable\";\nexport { SubmitButton } from \"./SubmitButton\";\nexport { CheckboxControl } from \"./CheckboxControl\";\nexport { SelectControl } from \"./SelectControl\";\nexport { TextControl } from \"./TextControl\";\nexport { TokensControl } from \"./TokensControl\";\nexport { NonceControl } from \"./NonceControl\";\nexport { TrueFalseControl } from \"./TrueFalseControl\";\n","import { formatUnixTimeToTimestamp, getCurrentTimeAsTimestamp, normalizeUnixTimeToSeconds } from './time';\nimport { isNumber } from './utils';\nimport { register, createReduxStore } from '&wp.data';\n\nexport const createStore = (props) => {\n    if (props.defaultState.terms && typeof props.defaultState.terms === 'string') {\n        props.defaultState.terms = props.defaultState.terms.split(',').map(term => parseInt(term));\n    }\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? props.defaultState.date : getCurrentTimeAsTimestamp(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n        changeAction: 'no-change',\n        calendarIsVisible: true,\n    }\n\n    const store = createReduxStore(props.name, {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_DATE':\n                    // Make sure the date is a number, if it is a string with only numbers\n                    if (typeof action.date !== 'number' && isNumber(action.date)) {\n                        action.date = parseInt(action.date);\n                    }\n\n                    // If string, convert to unix time\n                    if (typeof action.date === 'string') {\n                        action.date = new Date(action.date).getTime();\n                    }\n\n                    // Make sure the time is always in seconds\n                    action.date = normalizeUnixTimeToSeconds(action.date);\n\n                    // Convert to formated string format, considering it is in the site's timezone\n                    action.date = formatUnixTimeToTimestamp(action.date);\n\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n                case 'SET_CHANGE_ACTION':\n                    return {\n                        ...state,\n                        changeAction: action.changeAction,\n                    }\n                case 'SET_CALENDAR_IS_VISIBLE':\n                    return {\n                        ...state,\n                        calendarIsVisible: action.calendarIsVisible,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            },\n            setChangeAction(changeAction) {\n                return {\n                    type: 'SET_CHANGE_ACTION',\n                    changeAction: changeAction\n                }\n            },\n            setCalendarIsVisible(calendarIsVisible) {\n                return {\n                    type: 'SET_CALENDAR_IS_VISIBLE',\n                    calendarIsVisible: calendarIsVisible\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            },\n            getChangeAction(state) {\n                return state.changeAction;\n            },\n            getCalendarIsVisible(state) {\n                return state.calendarIsVisible;\n            }\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTimeInSeconds = () => {\n    return normalizeUnixTimeToSeconds(new Date().getTime());\n}\n\nexport const getCurrentTimeAsTimestamp = () => {\n    return formatUnixTimeToTimestamp(getCurrentTimeInSeconds());\n}\n\nexport const formatUnixTimeToTimestamp = (unixTimestamp) => {\n    const date = new Date(\n        normalizeUnixTimeToSeconds(unixTimestamp)\n    );\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimestampToUnixTime = (time) => {\n    const date = new Date(time);\n\n    return normalizeUnixTimeToSeconds(date.getTime());\n}\n\nexport const timeIsInSeconds = (time) => {\n    return parseInt(time).toString().length <= 10;\n}\n\nexport const normalizeUnixTimeToSeconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time : time / 1000;\n}\n\nexport const normalizeUnixTimeToMilliseconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time * 1000 : time;\n}\n","export const compact = (array) => {\n    if (!array) {\n        return [];\n    }\n\n    if (! Array.isArray(array) && typeof array === 'object') {\n        array = Object.values(array);\n    }\n\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n\nexport const isGutenbergEnabled = () => {\n    return document.body.classList.contains('block-editor-page');\n}\n\nexport const getElementByName = (name) => {\n    return document.getElementsByName(name)[0];\n}\n\nexport const getFieldByName = (name, postId) => {\n    return document.querySelector(`#the-list tr#post-${postId} .column-expirationdate input#future_action_${name}-${postId}`);\n}\n\nexport const getFieldValueByName = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return null;\n    }\n\n    return field.value;\n};\n\nexport const getFieldValueByNameAsArrayOfInt = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field || !field.value) {\n        return [];\n    }\n\n    if (typeof field.value === 'number') {\n        field.value = field.value.toString();\n    }\n\n    return field.value.split(',').map(term => parseInt(term));\n};\n\nexport const getFieldValueByNameAsBool = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return false;\n    }\n\n    return field.value === '1' || field.value === 'true';\n}\n\nexport const getActionSettingsFromColumnData = (postId) => {\n    const columnData = document.querySelector(`#post-expire-column-${postId}`);\n\n    return {\n        enabled: columnData.dataset.actionEnabled === '1',\n        action: columnData.dataset.actionType,\n        date: columnData.dataset.actionDate,\n        dateUnix: columnData.dataset.actionDateUnix,\n        taxonomy: columnData.dataset.actionTaxonomy,\n        terms: columnData.dataset.actionTerms,\n    };\n}\n\n/**\n * This function is used to determine if a value is a number, including strings.\n *\n * @param {*} value\n * @returns\n */\nexport const isNumber = (value) => {\n    return !isNaN(value);\n}\n","module.exports = ReactDOM;","module.exports = publishpressFutureClassicEditorConfig;","module.exports = wp;","module.exports = wp.components;","module.exports = wp.data;","module.exports = wp.element;","module.exports = wp.hooks;","module.exports = wp.url;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FutureActionPanelClassicEditor } from './components';\nimport { createStore } from './data';\nimport { isGutenbergEnabled } from './utils';\nimport { createRoot } from '&wp.element';\nimport { select } from '&wp.data';\nimport {\n    postType,\n    isNewPost,\n    actionsSelectOptions,\n    is12Hour,\n    timeFormat,\n    startOfWeek,\n    strings,\n    taxonomyName,\n    postTypeDefaultConfig,\n    defaultDate\n} from \"&config.classic-editor\";\nimport { render } from \"&ReactDOM\";\n\nif (! isGutenbergEnabled()) {\n    const storeName = 'publishpress-future/future-action';\n\n    if (!select(storeName)) {\n        createStore({\n            name: storeName,\n            defaultState: {\n                autoEnable: postTypeDefaultConfig.autoEnable,\n                action: postTypeDefaultConfig.expireType,\n                date: defaultDate,\n                taxonomy: postTypeDefaultConfig.taxonomy,\n                terms: postTypeDefaultConfig.terms,\n            }\n        });\n    }\n\n    const container = document.getElementById(\"publishpress-future-classic-editor\");\n    const component = (\n        <FutureActionPanelClassicEditor\n            storeName={storeName}\n            postType={postType}\n            isNewPost={isNewPost}\n            actionsSelectOptions={actionsSelectOptions}\n            is12Hour={is12Hour}\n            timeFormat={timeFormat}\n            startOfWeek={startOfWeek}\n            strings={strings}\n            taxonomyName={taxonomyName}\n        />\n    );\n\n    if (createRoot) {\n        createRoot(container).render(component);\n    } else {\n        render(component, container);\n    }\n}\n"],"names":["ButtonsPanel","props","children","CheckboxControl","description","useState","checked","setChecked","unescapedDescription","className","dangerouslySetInnerHTML","__html","Fragment","label","name","id","onChange","value","DateTimePicker","currentDate","is12Hour","startOfWeek","normalizeUnixTimeToMilliseconds","__nextRemoveHelpButton","wp","components","PanelRow","SelectControl","FormTokenField","Spinner","BaseControl","element","useEffect","decodeEntities","htmlEntities","addQueryArgs","url","data","useSelect","useDispatch","apiFetch","FutureActionPanel","action","select","storeName","getAction","date","getDate","enabled","getEnabled","terms","getTerms","taxonomy","getTaxonomy","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","calendarIsVisible","getCalendarIsVisible","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","setCalendarIsVisible","insertTerm","term","count","link","slug","callOnChangeData","attribute","onChangeData","handleEnabledChange","isChecked","fetchTerms","path","then","result","forEach","getCalendarIsVisibleFromStorage","localStorage","getItem","context","autoEnableAndHideCheckbox","isCleanNewPost","setItem","selectedTerms","length","compact","map","mapTermsListById","termsListByNameKeys","Object","keys","is24hour","panelClass","contentPanelClass","datePanelClass","timeFormat","actionsSelectOptions","filter","item","indexOf","HelpText","string","href","target","parts","split","push","shift","before","after","key","replaceCurlyBracketsWithLink","strings","timezoneSettingsHelp","displayTaxonomyField","String","includes","type","enablePostExpiration","options","loading","noTaxonomyFound","noTermsFound","suggestions","mapTermsListByName","maxSuggestions","__experimentalExpandOnFocus","__experimentalAutoSelectFirstMatch","ToggleCalendarDatePicker","onChangeDate","onToggleCalendar","isExpanded","FutureActionPanelBlockEditor","PluginDocumentSettingPanel","editPost","getEditedPostAttribute","title","panelTitle","icon","initialOpen","postTypeDefaultConfig","autoEnable","postType","store","newAttribute","publishpress_future_action","entries","editPostAttribute","FutureActionPanelBulkEdit","changeAction","getChangeAction","setChangeAction","termsString","join","noChange","changeAdd","addOnly","changeOnly","removeOnly","futureActionUpdate","isNewPost","getElementByName","nonce","FutureActionPanelClassicEditor","Date","getTimezoneOffset","document","getElementsByName","getElementValueByName","parseInt","getTermsFromElementByName","FutureActionPanelQuickEdit","NonceControl","referrer","PostTypeSettingsPanel","settings","postTypeTaxonomy","setPostTypeTaxonomy","termOptions","setTermOptions","termsSelectIsLoading","setTermsSelectIsLoading","setSelectedTerms","howToExpire","settingHowToExpire","setSettingHowToExpire","active","isActive","setIsActive","defaultExpireOffset","expireOffset","setExpireOffset","emailNotification","setEmailNotification","autoEnabled","isAutoEnabled","setIsAutoEnabled","taxonomiesList","settingsTermsOptions","option","termOptionsLabels","settingsRows","SettingRow","text","fieldActive","fieldActiveLabel","fieldAutoEnable","fieldAutoEnableLabel","fieldTaxonomy","selected","noItemFoundMessage","noItemsfound","fieldTaxonomyDescription","expireTypeList","fieldHowToExpire","fieldHowToExpireDescription","TokensControl","fieldTerm","isLoading","fieldTermDescription","expandOnFocus","autoSelectFirstMatch","fieldDefaultDateTimeOffset","TextControl","placeholder","globalDefaultExpireOffset","fieldDefaultDateTimeOffsetDescription","fieldWhoToNotify","fieldWhoToNotifyDescription","applyFilters","SettingsFieldset","legend","SettingsTable","bodyChildren","PostTypesSettingsPanels","panels","postTypeSettings","valign","scope","htmlFor","SettingsForm","method","SettingsSection","SubmitButton","ToggleArrowButton","iconExpanded","iconCollapsed","titleExpanded","titleCollapsed","Button","isSmall","onClick","toggleButtonElement","querySelector","dateTimeElement","nextElementSibling","timeElement","dateElement","nextSibling","insertBefore","hideCalendar","showCalendar","stringValue","setStringValue","TrueFalseControl","e","trueValue","jQuery","is","defaultChecked","trueLabel","falseValue","falseLabel","createStore","defaultState","getCurrentTimeAsTimestamp","createReduxStore","reducer","state","isNumber","getTime","normalizeUnixTimeToSeconds","formatUnixTimeToTimestamp","actions","selectors","register","getCurrentTimeInSeconds","unixTimestamp","getFullYear","getMonth","slice","getHours","getMinutes","getSeconds","timeIsInSeconds","formatTimestampToUnixTime","time","toString","getFieldByName","array","Array","isArray","values","debugLogFactory","config","message","console","isDebugEnabled","debug","isGutenbergEnabled","body","classList","contains","postId","getFieldValueByName","field","getFieldValueByNameAsArrayOfInt","getFieldValueByNameAsBool","getActionSettingsFromColumnData","columnData","dataset","actionEnabled","actionType","actionDate","dateUnix","actionDateUnix","actionTaxonomy","actionTerms","isNaN","module","exports","ReactDOM","publishpressFutureClassicEditorConfig","hooks","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","expireType","defaultDate","container","getElementById","component","createRoot","render"],"sourceRoot":""}