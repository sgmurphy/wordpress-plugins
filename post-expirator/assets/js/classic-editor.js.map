{"version":3,"file":"classic-editor.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/ButtonsPanel.jsx","webpack://post-expirator/./assets/jsx/components/CheckboxControl.jsx","webpack://post-expirator/./assets/jsx/components/DateTimePicker.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBlockEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBulkEdit.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelClassicEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelQuickEdit.jsx","webpack://post-expirator/./assets/jsx/components/NonceControl.jsx","webpack://post-expirator/./assets/jsx/components/PostTypeSettingsPanel.jsx","webpack://post-expirator/./assets/jsx/components/PostTypesSettingsPanels.jsx","webpack://post-expirator/./assets/jsx/components/SelectControl.jsx","webpack://post-expirator/./assets/jsx/components/SettingRow.jsx","webpack://post-expirator/./assets/jsx/components/SettingsFieldset.jsx","webpack://post-expirator/./assets/jsx/components/SettingsForm.jsx","webpack://post-expirator/./assets/jsx/components/SettingsSection.jsx","webpack://post-expirator/./assets/jsx/components/SettingsTable.jsx","webpack://post-expirator/./assets/jsx/components/Spinner.jsx","webpack://post-expirator/./assets/jsx/components/SubmitButton.jsx","webpack://post-expirator/./assets/jsx/components/TextControl.jsx","webpack://post-expirator/./assets/jsx/components/ToggleArrowButton.jsx","webpack://post-expirator/./assets/jsx/components/ToggleCalendarDatePicker.jsx","webpack://post-expirator/./assets/jsx/components/TokensControl.jsx","webpack://post-expirator/./assets/jsx/components/TrueFalseControl.jsx","webpack://post-expirator/./assets/jsx/components/index.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/external var \"ReactDOM\"","webpack://post-expirator/external var \"publishpressFutureClassicEditorConfig\"","webpack://post-expirator/external var \"wp\"","webpack://post-expirator/external var \"wp.components\"","webpack://post-expirator/external var \"wp.data\"","webpack://post-expirator/external var \"wp.element\"","webpack://post-expirator/external var \"wp.hooks\"","webpack://post-expirator/external var \"wp.url\"","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/classic-editor.jsx"],"sourcesContent":["/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const ButtonsPanel = function (props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment, useState  } from \"&wp.element\";\nimport { CheckboxControl as WPCheckboxControl } from \"&wp.components\";\n\nexport const CheckboxControl = function (props) {\n    const [checked, setChecked] = useState(props.checked || false);\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        setChecked(value);\n\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPCheckboxControl\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                checked={checked || false}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","import { normalizeUnixTimeToMilliseconds } from \"../time\";\nimport { DateTimePicker as WPDateTimePicker } from \"&wp.components\";\n\n\nexport const DateTimePicker = ({currentDate, onChange, is12Hour, startOfWeek}) => {\n    if (typeof currentDate === 'number') {\n        currentDate = normalizeUnixTimeToMilliseconds(currentDate);\n    }\n\n    return (\n        <WPDateTimePicker\n            currentDate={currentDate}\n            onChange={onChange}\n            __nextRemoveHelpButton={true}\n            is12Hour={is12Hour}\n            startOfWeek={startOfWeek}\n        />\n    )\n}\n","import { compact } from '../utils';\nimport { ToggleCalendarDatePicker } from './ToggleCalendarDatePicker';\n\nconst { PanelRow, CheckboxControl, SelectControl, FormTokenField, Spinner, BaseControl } = wp.components;\nconst { Fragment, useEffect, useState } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nexport const FutureActionPanel = (props) => {\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select(props.storeName).getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select(props.storeName).getTermsListByName(), []);\n    const termsListById = useSelect((select) => select(props.storeName).getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select(props.storeName).getIsFetchingTerms(), []);\n    const calendarIsVisible = useSelect((select) => select(props.storeName).getCalendarIsVisible(), []);\n    const hasValidData = useSelect((select) => select(props.storeName).getHasValidData(), []);\n    const newStatus = useSelect((select) => select(props.storeName).getNewStatus(), []);\n\n    const [validationError, setValidationError] = useState('');\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms,\n        setCalendarIsVisible,\n        setHasValidData,\n        setNewStatus\n    } = useDispatch(props.storeName);\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const insertTerm = (term) => {\n        termsListByName[term] = {id: term, count: 0, description: \"\", link: \"\", name: term, slug: term, taxonomy: taxonomy};\n        termsListById[term] = term;\n        setTermsListByName(termsListByName);\n        setTermsListById(termsListById);\n        setTerms([...terms, term]);\n\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            if (termsListByName[term]) {\n                return termsListByName[term].id;\n            }\n\n            insertTerm(term);\n\n            return term;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setNewStatus(props.newStatus);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleNewStatusChange = (value) => {\n        setNewStatus(value);\n\n        callOnChangeData('newStatus', value);\n    }\n\n    const handleDateChange = (value) => {\n        setDate(value);\n\n        callOnChangeData('date', value);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        if (!taxonomy) {\n            return;\n        }\n\n        setIsFetchingTerms(true);\n\n        apiFetch({\n            path: addQueryArgs(`publishpress-future/v1/terms/${taxonomy}`),\n        }).then((result) => {\n            result.terms.forEach(term => {\n                termsListByName[decodeEntities(term.name)] = term;\n                termsListById[term.id] = decodeEntities(term.name);\n            });\n\n            setTermsListByName(termsListByName);\n            setTermsListById(termsListById);\n            setTaxonomyName(decodeEntities(result.taxonomyName));\n            setIsFetchingTerms(false);\n        });\n    }\n\n    const storeCalendarIsVisibleOnStorage = (value) => {\n        localStorage.setItem('FUTURE_ACTION_CALENDAR_IS_VISIBLE_' + props.context, value ? '1' : '0');\n    }\n\n    const getCalendarIsVisibleFromStorage = () => {\n        return localStorage.getItem('FUTURE_ACTION_CALENDAR_IS_VISIBLE_' + props.context);\n    }\n\n    useEffect(() => {\n        if (props.autoEnableAndHideCheckbox)  {\n            setEnabled(true);\n        } else {\n            setEnabled(props.enabled);\n        }\n\n        setAction(props.action);\n        setNewStatus(props.newStatus);\n        setDate(props.date);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        if (getCalendarIsVisibleFromStorage() === null) {\n            setCalendarIsVisible(props.calendarIsVisible);\n        } else {\n            setCalendarIsVisible(getCalendarIsVisibleFromStorage() === '1');\n        }\n\n        // We need to get the value directly from the props because the value from the store is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                // Force populate the default values\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    useEffect(() => {\n        storeCalendarIsVisibleOnStorage(calendarIsVisible);\n    }, [calendarIsVisible]);\n\n    useEffect(() => {\n        if (hasValidData && props.onDataIsValid) {\n            props.onDataIsValid();\n        }\n\n        if (! hasValidData && props.onDataIsInvalid) {\n            props.onDataIsInvalid();\n        }\n    }, [hasValidData]);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    const panelClass = calendarIsVisible ? 'future-action-panel' : 'future-action-panel hidden-calendar';\n    const contentPanelClass = calendarIsVisible ? 'future-action-panel-content' : 'future-action-panel-content hidden-calendar';\n    const datePanelClass = calendarIsVisible ? 'future-action-date-panel' : 'future-action-date-panel hidden-calendar';\n\n    let is24hour;\n    if (props.timeFormat === 'inherited') {\n        is24hour = ! props.is12Hour;\n    } else {\n        is24hour = props.timeFormat === '24h';\n    }\n\n    const replaceCurlyBracketsWithLink = (string, href, target) => {\n        const parts = string.split('{');\n        const result = [];\n\n        result.push(parts.shift());\n\n        for (const part of parts) {\n            const [before, after] = part.split('}');\n\n            result.push(\n                <a href={href} target={target} key={href}>{before}</a>\n            );\n\n            result.push(after);\n        }\n\n        return result;\n    };\n\n    // Remove items from actions list if related to taxonomies and there is no taxonmoy for the post type\n    let actionsSelectOptions = props.actionsSelectOptions;\n    if (! props.taxonomy) {\n        actionsSelectOptions = props.actionsSelectOptions.filter((item) => {\n            return ['category', 'category-add', 'category-remove', 'category-remove-all'].indexOf(item.value) === -1;\n        });\n    }\n\n    const HelpText = replaceCurlyBracketsWithLink(props.strings.timezoneSettingsHelp, '/wp-admin/options-general.php#timezone_string', '_blank');\n    const displayTaxonomyField = String(action).includes('category') && action !== 'category-remove-all';\n\n    let termsFieldLabel = taxonomyName;\n    switch (action) {\n        case 'category':\n            termsFieldLabel = props.strings.newTerms.replace('%s', taxonomyName);\n            break;\n        case 'category-remove':\n            termsFieldLabel = props.strings.removeTerms.replace('%s', taxonomyName);\n            break;\n        case 'category-add':\n            termsFieldLabel = props.strings.addTerms.replace('%s', taxonomyName);\n            break;\n    }\n\n    const validateData = () => {\n        let valid = true;\n\n        if (! enabled) {\n            setValidationError('');\n            return true;\n        }\n\n        if (! action) {\n            setValidationError(props.strings.errorActionRequired);\n            valid = false;\n        }\n\n        if (! date) {\n            setValidationError(props.strings.errorDateRequired);\n            valid = false;\n        }\n\n        // Check if the date is in the past\n        if (date && new Date(date) < new Date()) {\n            setValidationError(props.strings.errorDateInPast);\n            valid = false;\n        }\n\n        const isTermRequired = ['category', 'category-add', 'category-remove'].includes(action);\n        const noTermIsSelected = terms.length === 0 || (terms.length === 1 && (terms[0] === '' || terms[0] === '0'));\n\n        if (isTermRequired && noTermIsSelected) {\n            setValidationError(props.strings.errorTermsRequired);\n            valid = false;\n        }\n\n        if (valid) {\n            setValidationError('');\n        }\n\n        return valid;\n    }\n\n    useEffect(() => {\n        if (! enabled) {\n            setHasValidData(true);\n            setValidationError('');\n\n            return;\n        }\n\n        setHasValidData(validateData());\n    }, [action, date, enabled, terms, taxonomy]);\n\n    // This adds a 'cancel' class to the input when the user clicks on the\n    // field to prevent the form from being submitted. This is a workaround\n    // for the issue on the quick-edit form where the form is submitted when\n    // the user presses the 'Enter' key trying to add a term to the field.\n    const forceIgnoreAutoSubmitOnEnter = (e) => {\n        jQuery(e.target).addClass('cancel');\n    }\n\n    return (\n        <div className={panelClass}>\n            {props.autoEnableAndHideCheckbox && (\n                <input type=\"hidden\" name={'future_action_enabled'} value={1} />\n            )}\n\n            {! props.autoEnableAndHideCheckbox && (\n                <PanelRow>\n                    <CheckboxControl\n                        label={props.strings.enablePostExpiration}\n                        checked={enabled || false}\n                        onChange={handleEnabledChange}\n                    />\n                </PanelRow>\n            )}\n\n            {enabled && (\n                <Fragment>\n                    <PanelRow className={contentPanelClass + ' future-action-full-width'}>\n                        <SelectControl\n                            label={props.strings.action}\n                            value={action}\n                            options={actionsSelectOptions}\n                            onChange={handleActionChange}\n                        />\n                    </PanelRow>\n\n                    {action === 'change-status' &&\n                        <PanelRow className=\"new-status\">\n                            <SelectControl\n                                label={props.strings.newStatus}\n                                options={props.statusesSelectOptions}\n                                value={newStatus}\n                                onChange={handleNewStatusChange}\n                            />\n                        </PanelRow>\n                    }\n\n                    {\n                        displayTaxonomyField && (\n                            isFetchingTerms && (\n                                <PanelRow>\n                                    <BaseControl label={taxonomyName}>\n                                        {`${props.strings.loading} (${taxonomyName})`}\n                                        <Spinner />\n                                    </BaseControl>\n                                </PanelRow>\n                            )\n                            || (!taxonomy && (\n                                <PanelRow>\n                                    <BaseControl label={taxonomyName} className=\"future-action-warning\">\n                                        <div>\n                                            <i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}\n                                        </div>\n                                    </BaseControl>\n                                </PanelRow>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <PanelRow>\n                                            <BaseControl label={taxonomyName} className=\"future-action-warning\">\n                                                <div>\n                                                    <i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}\n                                                </div>\n                                            </BaseControl>\n                                        </PanelRow>\n                                    )\n                                    || (\n                                        <PanelRow className=\"future-action-full-width\">\n                                            <BaseControl>\n                                                <FormTokenField\n                                                    label={termsFieldLabel}\n                                                    value={selectedTerms}\n                                                    suggestions={termsListByNameKeys}\n                                                    onChange={handleTermsChange}\n                                                    placeholder={props.strings.addTermsPlaceholder}\n                                                    maxSuggestions={1000}\n                                                    onFocus={forceIgnoreAutoSubmitOnEnter}\n                                                    __experimentalExpandOnFocus={true}\n                                                    __experimentalAutoSelectFirstMatch={true}\n                                                />\n                                            </BaseControl>\n                                        </PanelRow>\n                                    )\n                                )\n                            )\n                        )\n                    }\n\n                    <PanelRow className={datePanelClass}>\n                        <ToggleCalendarDatePicker\n                            currentDate={date}\n                            onChangeDate={handleDateChange}\n                            onToggleCalendar={() => setCalendarIsVisible(!calendarIsVisible)}\n                            is12Hour={!is24hour}\n                            startOfWeek={props.startOfWeek}\n                            isExpanded={calendarIsVisible}\n                            strings={props.strings}\n                        />\n                    </PanelRow>\n\n                    <PanelRow>\n                        <div className=\"future-action-help-text\">\n                            <hr />\n\n                            <span className=\"dashicons dashicons-info\"></span> {HelpText}\n                        </div>\n                    </PanelRow>\n\n                    {! hasValidData && (\n                        <PanelRow>\n                            <BaseControl className=\"notice notice-error\">\n                                <div>{validationError}</div>\n                            </BaseControl>\n                        </PanelRow>\n                    )}\n                </Fragment>\n            )}\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\n\nexport const FutureActionPanelBlockEditor = (props) => {\n    const { PluginDocumentSettingPanel } = wp.editPost;\n    const { useDispatch, select } = wp.data;\n\n    const { editPost } = useDispatch('core/editor');\n\n    const editPostAttribute = (newAttribute) => {\n        const attribute = {\n            publishpress_future_action: {}\n        };\n\n        // For each property on newAttribute, set the value on attribute\n        for (const [name, value] of Object.entries(newAttribute)) {\n            attribute.publishpress_future_action[name] = value;\n        }\n\n        editPost(attribute);\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        const newAttribute = {\n            'enabled': store.getEnabled()\n        }\n\n        if (newAttribute.enabled) {\n            newAttribute['action'] = store.getAction();\n            newAttribute['newStatus'] = store.getNewStatus();\n            newAttribute['date'] = store.getDate();\n            newAttribute['terms'] = store.getTerms();\n            newAttribute['taxonomy'] = store.getTaxonomy();\n        }\n\n        editPostAttribute(newAttribute);\n    }\n\n    const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n    const { lockPostSaving, unlockPostSaving } = useDispatch('core/editor');\n\n    const onDataIsValid = () => {\n        unlockPostSaving('future-action');\n    }\n\n    const onDataIsInvalid = () => {\n        lockPostSaving('future-action');\n    }\n\n    return (\n        <PluginDocumentSettingPanel\n            name={'publishpress-future-action-panel'}\n            title={props.strings.panelTitle}\n            icon=\"calendar\"\n            initialOpen={props.postTypeDefaultConfig.autoEnable}\n            className={'post-expirator-panel'}>\n            <div id='publishpress-future-block-editor'>\n                <FutureActionPanel\n                    context={'block-editor'}\n                    postType={props.postType}\n                    isCleanNewPost={props.isCleanNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    statusesSelectOptions={props.statusesSelectOptions}\n                    enabled={data.enabled}\n                    calendarIsVisible={true}\n                    action={data.action}\n                    newStatus={data.newStatus}\n                    date={data.date}\n                    terms={data.terms}\n                    taxonomy={data.taxonomy}\n                    taxonomyName={props.taxonomyName}\n                    onChangeData={onChangeData}\n                    is12Hour={props.is12Hour}\n                    timeFormat={props.timeFormat}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings}\n                    onDataIsValid={onDataIsValid}\n                    onDataIsInvalid={onDataIsInvalid} />\n            </div>\n        </PluginDocumentSettingPanel>\n    );\n};\n","import { FutureActionPanel, SelectControl } from '.';\nimport { getElementByName } from '../utils';\n\nexport const FutureActionPanelBulkEdit = (props) => {\n    const { useSelect, useDispatch, select } = wp.data;\n    const { useEffect } = wp.element;\n\n    const onChangeData = (attribute, value) => {\n        getElementByName('future_action_bulk_enabled').value = select(props.storeName).getEnabled() ? 1 : 0;\n        getElementByName('future_action_bulk_action').value = select(props.storeName).getAction();\n        getElementByName('future_action_bulk_new_status').value = select(props.storeName).getNewStatus();\n        getElementByName('future_action_bulk_date').value = select(props.storeName).getDate();\n        getElementByName('future_action_bulk_terms').value = select(props.storeName).getTerms().join(',');\n        getElementByName('future_action_bulk_taxonomy').value = select(props.storeName).getTaxonomy();\n    }\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const newStatus = useSelect((select) => select(props.storeName).getNewStatus(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const changeAction = useSelect((select) => select(props.storeName).getChangeAction(), []);\n    const hasValidData = useSelect((select) => select(props.storeName).getHasValidData(), []);\n\n    const {\n        setChangeAction\n    } = useDispatch(props.storeName);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    const handleStrategyChange = (value) => {\n        setChangeAction(value);\n    };\n\n    const options = [\n        { value: 'no-change', label: props.strings.noChange },\n        { value: 'change-add', label: props.strings.changeAdd },\n        { value: 'add-only', label: props.strings.addOnly },\n        { value: 'change-only', label: props.strings.changeOnly },\n        { value: 'remove-only', label: props.strings.removeOnly },\n    ];\n\n    const optionsToDisplayPanel = ['change-add', 'add-only', 'change-only'];\n\n    useEffect(() => {\n        // We are not using onDataIsValid and onDataIsInvalid because we need to enable/disable the button\n        // also based on the changeAction value.\n        if (hasValidData || changeAction === 'no-change') {\n            jQuery('#bulk_edit').prop('disabled', false);\n        } else {\n            jQuery('#bulk_edit').prop('disabled', true);\n        }\n    }, [hasValidData, changeAction]);\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <SelectControl\n                label={props.strings.futureActionUpdate}\n                name={'future_action_bulk_change_action'}\n                value={changeAction}\n                options={options}\n                onChange={handleStrategyChange}\n            />\n\n            {optionsToDisplayPanel.includes(changeAction) && (\n                <FutureActionPanel\n                    context={'bulk-edit'}\n                    autoEnableAndHideCheckbox={true}\n                    postType={props.postType}\n                    isCleanNewPost={props.isNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    statusesSelectOptions={props.statusesSelectOptions}\n                    enabled={true}\n                    calendarIsVisible={false}\n                    action={action}\n                    newStatus={newStatus}\n                    date={date}\n                    terms={terms}\n                    taxonomy={taxonomy}\n                    taxonomyName={props.taxonomyName}\n                    onChangeData={onChangeData}\n                    is12Hour={props.is12Hour}\n                    timeFormat={props.timeFormat}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings} />\n            )}\n\n            {/* Bulk edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_bulk_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_bulk_action'} value={action} />\n            <input type=\"hidden\" name={'future_action_bulk_new_status'} value={newStatus} />\n            <input type=\"hidden\" name={'future_action_bulk_date'} value={date} />\n            <input type=\"hidden\" name={'future_action_bulk_terms'} value={termsString} />\n            <input type=\"hidden\" name={'future_action_bulk_taxonomy'} value={taxonomy} />\n            <input type=\"hidden\" name={'future_action_bulk_view'} value=\"bulk-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from \"./\";\nimport { select, useSelect } from \"&wp.data\";\nimport { useEffect } from \"&wp.element\";\n\nexport const FutureActionPanelClassicEditor = (props) => {\n    const browserTimezoneOffset = new Date().getTimezoneOffset();\n\n    const getElementByName = (name) => {\n        return document.getElementsByName(name)[0];\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        getElementByName('future_action_enabled').value = store.getEnabled() ? 1 : 0;\n        getElementByName('future_action_action').value = store.getAction();\n        getElementByName('future_action_new_status').value = store.getNewStatus();\n        getElementByName('future_action_date').value = store.getDate();\n        getElementByName('future_action_terms').value = store.getTerms().join(',');\n        getElementByName('future_action_taxonomy').value = store.getTaxonomy();\n    }\n\n    const getTermsFromElementByName = (name) => {\n        const element = getElementByName(name);\n        if (!element) {\n            return [];\n        }\n\n        let terms = element.value.split(',');\n\n        if (terms.length === 1 && terms[0] === '') {\n            terms = [];\n        }\n\n        return terms.map(term => parseInt(term));\n    }\n\n    const getElementValueByName = (name) => {\n        const element = getElementByName(name);\n        if (!element) {\n            return '';\n        }\n\n        return element.value;\n    }\n\n    const data = {\n        enabled: getElementValueByName('future_action_enabled') === '1',\n        action: getElementValueByName('future_action_action'),\n        newStatus: getElementValueByName('future_action_new_status'),\n        date: getElementValueByName('future_action_date'),\n        terms: getTermsFromElementByName('future_action_terms'),\n        taxonomy: getElementValueByName('future_action_taxonomy'),\n    };\n\n    const onDataIsValid = () => {\n        jQuery('#publish').prop('disabled', false);\n    }\n\n    const onDataIsInvalid = () => {\n        jQuery('#publish').prop('disabled', true);\n    }\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                context={'classic-editor'}\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                statusesSelectOptions={props.statusesSelectOptions}\n                enabled={data.enabled}\n                calendarIsVisible={true}\n                action={data.action}\n                newStatus={data.newStatus}\n                date={data.date}\n                terms={data.terms}\n                taxonomy={data.taxonomy}\n                taxonomyName={props.taxonomyName}\n                onChangeData={onChangeData}\n                is12Hour={props.is12Hour}\n                timeFormat={props.timeFormat}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings}\n                onDataIsValid={onDataIsValid}\n                onDataIsInvalid={onDataIsInvalid} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\nimport { useSelect, select } from '&wp.data';\nimport { useEffect } from '&wp.element';\n\nexport const FutureActionPanelQuickEdit = (props) => {\n    const onChangeData = (attribute, value) => {};\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const hasValidData = useSelect((select) => select(props.storeName).getHasValidData(), []);\n    const newStatus = useSelect((select) => select(props.storeName).getNewStatus(), []);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    const onDataIsValid = () => {\n        jQuery('.button-primary.save').prop('disabled', false);\n    }\n\n    const onDataIsInvalid = () => {\n        jQuery('.button-primary.save').prop('disabled', true);\n    }\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                context={'quick-edit'}\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                statusesSelectOptions={props.statusesSelectOptions}\n                enabled={enabled}\n                calendarIsVisible={false}\n                action={action}\n                newStatus={newStatus}\n                date={date}\n                terms={terms}\n                taxonomy={taxonomy}\n                taxonomyName={props.taxonomyName}\n                onChangeData={onChangeData}\n                is12Hour={props.is12Hour}\n                timeFormat={props.timeFormat}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings}\n                onDataIsValid={onDataIsValid}\n                onDataIsInvalid={onDataIsInvalid} />\n\n            {/* Quick edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_action'} value={action ? action : ''} />\n            <input type=\"hidden\" name={'future_action_new_status'} value={newStatus ? newStatus : ''} />\n            <input type=\"hidden\" name={'future_action_date'} value={date ? date : ''} />\n            <input type=\"hidden\" name={'future_action_terms'} value={termsString ? termsString : ''} />\n            <input type=\"hidden\" name={'future_action_taxonomy'} value={taxonomy ? taxonomy : ''} />\n            <input type=\"hidden\" name={'future_action_view'} value=\"quick-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\n\nexport const NonceControl = function (props) {\n    if (! props.name) {\n        props.name = '_wpnonce';\n    }\n\n    if (! props.referrer) {\n        props.referrer = true;\n    }\n\n    return (\n        <Fragment>\n            <input type=\"hidden\" name={props.name} id={props.name} value={props.nonce} />\n\n            {props.referrer &&\n                <input type=\"hidden\" name=\"_wp_http_referer\" value={props.referrer}/>\n            }\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport {\n    SettingRow,\n    SettingsFieldset,\n    SettingsTable,\n    SelectControl,\n    TextControl,\n    TokensControl,\n    CheckboxControl\n} from './';\nimport { useEffect, useState, Fragment } from '&wp.element';\nimport { addQueryArgs } from '&wp.url';\nimport { applyFilters } from '&wp.hooks';\nimport { apiFetch } from '&wp';\n\nconst { PanelRow, BaseControl } = wp.components;\n\nvar apiRequestController = null;\n\nexport const PostTypeSettingsPanel = function (props) {\n    const originalExpireTypeList = props.expireTypeList[props.postType];\n\n    const [postTypeTaxonomy, setPostTypeTaxonomy] = useState(props.settings.taxonomy);\n    const [termOptions, setTermOptions] = useState([]);\n    const [termsSelectIsLoading, setTermsSelectIsLoading] = useState(false);\n    const [selectedTerms, setSelectedTerms] = useState([]);\n    const [settingHowToExpire, setSettingHowToExpire] = useState(props.settings.howToExpire);\n    const [isActive, setIsActive] = useState(props.settings.active);\n    const [expireOffset, setExpireOffset] = useState(props.settings.defaultExpireOffset);\n    const [emailNotification, setEmailNotification] = useState(props.settings.emailNotification);\n    const [isAutoEnabled, setIsAutoEnabled] = useState(props.settings.autoEnabled);\n    const [hasValidData, setHasValidData] = useState(false);\n    const [validationError, setValidationError] = useState('');\n    const [taxonomyLabel, setTaxonomyLabel] = useState('');\n    const [howToExpireList, setHowToExpireList] = useState(originalExpireTypeList);\n    const [newStatus, setNewStatus] = useState(props.settings.newStatus);\n    const [hasPendingValidation, setHasPendingValidation] = useState(false);\n    const [offsetPreview, setOffsetPreview] = useState('');\n\n    const taxonomyRelatedActions = [\n        'category',\n        'category-add',\n        'category-remove',\n        'category-remove-all'\n    ];\n\n    const onChangeTaxonomy = function (value) {\n        setPostTypeTaxonomy(value);\n    };\n\n    const onChangeTerms = (value) => {\n        setSelectedTerms(value);\n    };\n\n    const onChangeHowToExpire = (value) => {\n        setSettingHowToExpire(value);\n    }\n\n    const onChangeActive = (value) => {\n        setIsActive(value);\n    }\n\n    const onChangeExpireOffset = (value) => {\n        setExpireOffset(value);\n    }\n\n    const onChangeEmailNotification = (value) => {\n        setEmailNotification(value);\n    }\n\n    const onChangeAutoEnabled = (value) => {\n        setIsAutoEnabled(value);\n    }\n\n    const validateData = () => {\n        if (! isActive) {\n            setValidationError('');\n            return true;\n        }\n\n        if (expireOffset) {\n            if (apiRequestController) {\n                apiRequestController.abort();\n            }\n\n            apiRequestController = typeof AbortController === 'undefined' ? undefined : new AbortController();\n            const signal = apiRequestController ? apiRequestController.signal : undefined;\n            setHasPendingValidation(true);\n\n            apiFetch({\n                path: addQueryArgs(`publishpress-future/v1/settings/validate-expire-offset`),\n                method: 'POST',\n                data: {\n                    offset: expireOffset\n                },\n                signal: signal\n            }).then((result) => {\n                setHasPendingValidation(false);\n\n                setHasValidData(result.isValid);\n                setValidationError(result.message);\n\n                if (result.isValid) {\n                    setOffsetPreview(result.preview);\n                } else {\n                    setOffsetPreview('');\n                }\n            });\n        }\n\n        setValidationError('');\n        return true;\n    }\n\n    useEffect(() => {\n        // Remove items from expireTypeList if related to taxonomies and there is no taxonmoy for the post type\n        if (props.taxonomiesList.length === 0) {\n            let newExpireTypeList = [];\n\n            newExpireTypeList = howToExpireList.filter((item) => {\n                return taxonomyRelatedActions.indexOf(item.value) === -1;\n            });\n\n            setHowToExpireList(newExpireTypeList);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (!postTypeTaxonomy || !props.taxonomiesList) {\n            return;\n        }\n\n        setTermsSelectIsLoading(true);\n        apiFetch({\n            path: addQueryArgs(`publishpress-future/v1/terms/${postTypeTaxonomy}`),\n        }).then((result) => {\n            let options = [];\n\n            let settingsTermsOptions = null;\n            let option;\n\n            result.terms.forEach(term => {\n                option = { value: term.id, label: term.name };\n                options.push(option);\n\n                if (postTypeTaxonomy === props.settings.taxonomy && props.settings.terms.includes(term.id)) {\n                    if (settingsTermsOptions === null) {\n                        settingsTermsOptions = [];\n                    }\n\n                    settingsTermsOptions.push(option.label);\n                }\n            });\n\n            setTermOptions(options);\n            setSelectedTerms(settingsTermsOptions);\n            setTermsSelectIsLoading(false);\n        });\n\n        props.taxonomiesList.forEach((taxonomy) => {\n            if (taxonomy.value === postTypeTaxonomy) {\n                setTaxonomyLabel(taxonomy.label);\n            }\n        });\n    }, [postTypeTaxonomy]);\n\n    useEffect(() => {\n        setHasValidData(validateData());\n    }, [isActive, postTypeTaxonomy, selectedTerms, settingHowToExpire, taxonomyLabel, expireOffset]);\n\n    useEffect(() => {\n        if (!taxonomyLabel) {\n            return;\n        }\n\n        // Update the list of actions replacing the taxonomy name.\n        let newExpireTypeList = [];\n\n        originalExpireTypeList.forEach((expireType) => {\n            let label = expireType.label;\n\n            if (taxonomyRelatedActions.indexOf(expireType.value) !== -1) {\n                label = label.replace('%s', taxonomyLabel.toLowerCase());\n            }\n\n            newExpireTypeList.push({\n                value: expireType.value,\n                label: label\n            });\n        });\n\n        setHowToExpireList(newExpireTypeList);\n    }, [taxonomyLabel]);\n\n    useEffect(() => {\n        if (hasValidData && props.onDataIsValid) {\n            props.onDataIsValid(props.postType);\n        }\n\n        if (!hasValidData && props.onDataIsInvalid) {\n            props.onDataIsInvalid(props.postType);\n        }\n    }, [hasValidData]);\n\n    useEffect(() => {\n        if (hasPendingValidation && props.onValidationStarted) {\n            props.onValidationStarted(props.postType);\n        }\n\n        if (!hasPendingValidation && props.onValidationFinished) {\n            props.onValidationFinished(props.postType);\n        }\n    }, [hasPendingValidation]);\n\n    const termOptionsLabels = termOptions.map((term) => term.label);\n\n    let settingsRows = [\n        <SettingRow label={props.text.fieldActive} key={'expirationdate_activemeta-' + props.postType}>\n            <CheckboxControl\n                name={'expirationdate_activemeta-' + props.postType}\n                checked={isActive || false}\n                label={props.text.fieldActiveLabel}\n                onChange={onChangeActive}\n            />\n        </SettingRow>\n    ];\n\n    if (isActive) {\n        settingsRows.push(\n            <SettingRow label={props.text.fieldAutoEnable} key={'expirationdate_autoenable-' + props.postType}>\n                <CheckboxControl\n                    name={'expirationdate_autoenable-' + props.postType}\n                    checked={isAutoEnabled || false}\n                    label={props.text.fieldAutoEnableLabel}\n                    onChange={onChangeAutoEnabled}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldTaxonomy} key={'expirationdate_taxonomy-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_taxonomy-' + props.postType}\n                    options={props.taxonomiesList}\n                    selected={postTypeTaxonomy}\n                    noItemFoundMessage={props.text.noItemsfound}\n                    description={props.text.fieldTaxonomyDescription}\n                    data={props.postType}\n                    onChange={onChangeTaxonomy}\n                >\n                </SelectControl>\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldHowToExpire} key={'expirationdate_expiretype-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_expiretype-' + props.postType}\n                    className={'pe-howtoexpire'}\n                    options={howToExpireList}\n                    description={props.text.fieldHowToExpireDescription}\n                    selected={settingHowToExpire}\n                    onChange={onChangeHowToExpire}\n                />\n\n                {settingHowToExpire === 'change-status' &&\n                    <SelectControl\n                        name={'expirationdate_newstatus-' + props.postType}\n                        options={props.statusesList}\n                        selected={newStatus}\n                        onChange={setNewStatus}\n                    />\n                }\n\n                {(props.taxonomiesList.length > 0 && (['category', 'category-add', 'category-remove'].indexOf(settingHowToExpire) > -1)) &&\n                    <TokensControl\n                        label={props.text.fieldTerm}\n                        name={'expirationdate_terms-' + props.postType}\n                        options={termOptionsLabels}\n                        value={selectedTerms}\n                        isLoading={termsSelectIsLoading}\n                        onChange={onChangeTerms}\n                        description={props.text.fieldTermDescription}\n                        maxSuggestions={1000}\n                        expandOnFocus={true}\n                        autoSelectFirstMatch={true}\n                    />\n                }\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldDefaultDateTimeOffset} key={'expired-custom-date-' + props.postType}>\n                <TextControl\n                    name={'expired-custom-date-' + props.postType}\n                    value={expireOffset}\n                    loading={hasPendingValidation}\n                    placeholder={props.settings.globalDefaultExpireOffset}\n                    description={props.text.fieldDefaultDateTimeOffsetDescription}\n                    unescapedDescription={true}\n                    onChange={onChangeExpireOffset}\n                />\n\n                {offsetPreview && (\n                    <Fragment>\n                        <h4>{props.text.datePreview}</h4>\n                        <code>{offsetPreview}</code>\n                    </Fragment>\n                )}\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldWhoToNotify} key={'expirationdate_emailnotification-' + props.postType}>\n                <TextControl\n                    name={'expirationdate_emailnotification-' + props.postType}\n                    className=\"large-text\"\n                    value={emailNotification}\n                    description={props.text.fieldWhoToNotifyDescription}\n                    onChange={onChangeEmailNotification}\n                />\n            </SettingRow>\n        );\n    }\n\n    settingsRows = applyFilters('expirationdate_settings_posttype', settingsRows, props, isActive, useState);\n\n    return (\n        <SettingsFieldset legend={props.legend}>\n            <SettingsTable bodyChildren={settingsRows} />\n\n            {! hasValidData && (\n                <PanelRow>\n                    <BaseControl className=\"notice notice-error\">\n                        <div>{validationError}</div>\n                    </BaseControl>\n                </PanelRow>\n            )}\n        </SettingsFieldset>\n    );\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport { PostTypeSettingsPanel } from \"./\";\n\nexport const PostTypesSettingsPanels = function (props) {\n    let panels = [];\n\n    for (const [postType, postTypeSettings] of Object.entries(props.settings)) {\n        panels.push(\n            <PostTypeSettingsPanel\n                legend={postTypeSettings.label}\n                text={props.text}\n                postType={postType}\n                settings={postTypeSettings}\n                expireTypeList={props.expireTypeList}\n                taxonomiesList={props.taxonomiesList[postType]}\n                statusesList={props.statusesList[postType]}\n                key={`${postType}-panel`}\n                onDataIsValid={props.onDataIsValid}\n                onDataIsInvalid={props.onDataIsInvalid}\n                onValidationStarted={props.onValidationStarted}\n                onValidationFinished={props.onValidationFinished}\n            />\n        );\n    }\n\n    return (panels);\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\nimport { SelectControl as WPSelectControl } from \"&wp.components\";\n\nexport const SelectControl = function (props) {\n    const onChange = (value) => {\n        props.onChange(value);\n    };\n\n    return (\n        <Fragment>\n            {props.options.length === 0 && (\n                <div>{props.noItemFoundMessage}</div>\n            )}\n\n            {props.options.length > 0 && (\n                <WPSelectControl\n                    label={props.label}\n                    name={props.name}\n                    id={props.name}\n                    className={props.className}\n                    value={props.selected}\n                    onChange={onChange}\n                    data-data={props.data}\n                    options={props.options}\n                />\n            )}\n\n            {props.children}\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\n\nexport const SettingRow = function (props) {\n    return (\n        <tr valign=\"top\">\n            <th scope=\"row\">\n                <label htmlFor=\"\">{props.label}</label>\n            </th>\n            <td>\n                {props.children}\n            </td>\n        </tr>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsFieldset = function (props) {\n    return (\n        <fieldset>\n                <legend>{props.legend}</legend>\n                {props.children}\n        </fieldset>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsForm = function (props) {\n    return (\n        <form method=\"post\">\n            {props.children}\n        </form>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\n\nexport const SettingsSection = function (props) {\n    return (\n        <Fragment>\n            <h2>{props.title}</h2>\n            <p>{props.description}</p>\n            {props.children}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsTable = function (props) {\n    return (\n        <table className=\"form-table\">\n            <tbody>\n                {props.bodyChildren}\n            </tbody>\n        </table>\n    )\n}\n","/*\n * Copyright (c) 2024. PublishPress, All rights reserved.\n */\nexport const Spinner = function (props) {\n    return (\n        <span className=\"publishpress-future-spinner\"><div></div><div></div><div></div><div></div></span>\n    );\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SubmitButton = function (props) {\n    return (\n        <input\n            type=\"submit\"\n            name={props.name}\n            value={props.text}\n            disabled={props.disabled}\n            className=\"button-primary\"\n        />\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\nimport { TextControl as WPTextControl } from \"&wp.components\";\nimport { Spinner } from \"./\";\n\nexport const TextControl = function (props) {\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    let className = props.className ? props.className : '';\n\n    if (props.loading) {\n        className += ' publishpress-future-loading publishpress-future-loading-input';\n    }\n\n    return (\n        <Fragment>\n            <div className={className}>\n                <WPTextControl\n                    type=\"text\"\n                    label={props.label}\n                    name={props.name}\n                    id={props.name}\n                    className={props.className}\n                    value={props.value}\n                    placeholder={props.placeholder}\n                    onChange={onChange}\n                />\n\n                {props.loading && <Spinner/>}\n\n                {description}\n            </div>\n        </Fragment>\n    )\n}\n","import { Button } from '&wp.components';\n\nexport const ToggleArrowButton = function (props) {\n    const onClick = function () {\n        if (props.onClick) {\n            props.onClick();\n        }\n    };\n\n    const iconExpanded = props.iconExpanded ? props.iconExpanded : 'arrow-up-alt2';\n    const iconCollapsed = props.iconCollapsed ? props.iconCollapsed : 'arrow-down-alt2';\n\n    const icon = props.isExpanded ? iconExpanded : iconCollapsed;\n\n    const title = props.isExpanded ? props.titleExpanded : props.titleCollapsed;\n\n    return (\n        <Button\n            isSmall\n            title={title}\n            icon={icon}\n            onClick={onClick}\n            className={props.className}\n        />\n    )\n}\n","import { ToggleArrowButton } from \"./ToggleArrowButton\";\nimport { DateTimePicker } from \"./DateTimePicker\";\nimport { Fragment, useEffect } from \"&wp.element\";\n\nexport const ToggleCalendarDatePicker = (\n    {\n        isExpanded,\n        strings,\n        onToggleCalendar,\n        currentDate,\n        onChangeDate,\n        is12Hour,\n        startOfWeek\n    }\n) => {\n    useEffect(() => {\n        // Move the element of the toggle button to between the time and date elements.\n        const toggleButtonElement = document.querySelector('.future-action-calendar-toggle');\n\n        if (! toggleButtonElement) {\n            return;\n        }\n\n        const dateTimeElement = toggleButtonElement.nextElementSibling;\n\n        if (! dateTimeElement) {\n            return;\n        }\n\n        const timeElement = dateTimeElement.querySelector('.components-datetime__time');\n\n        if (! timeElement) {\n            return;\n        }\n\n        const dateElement = timeElement.nextSibling;\n\n        if (! dateElement) {\n            return;\n        }\n\n        dateTimeElement.insertBefore(toggleButtonElement, dateElement)\n    });\n\n    return (\n        <Fragment>\n            <ToggleArrowButton\n                className=\"future-action-calendar-toggle\"\n                isExpanded={isExpanded}\n                iconExpanded=\"arrow-up-alt2\"\n                iconCollapsed=\"calendar\"\n                titleExpanded={strings.hideCalendar}\n                titleCollapsed={strings.showCalendar}\n                onClick={onToggleCalendar} />\n\n            <DateTimePicker\n                currentDate={currentDate}\n                onChange={onChangeDate}\n                __nextRemoveHelpButton={true}\n                is12Hour={is12Hour}\n                startOfWeek={startOfWeek}\n            />\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment, useState, useEffect } from \"&wp.element\";\nimport { FormTokenField } from \"&wp.components\";\n\nexport const TokensControl = (props) => {\n    const [stringValue, setStringValue] = useState('');\n\n    useEffect(() => {\n        if (props.value) {\n            setStringValue(props.value.join(','));\n        }\n    }, [props.value]);\n\n    let description;\n\n    if (props.description) {\n        if (props.unescapedDescription) {\n            // If using this option, the HTML has to be escaped before injected into the JS interface.\n            description = <p className=\"description\" dangerouslySetInnerHTML={{__html: props.description}}></p>;\n        } else {\n            description = <p className=\"description\">{props.description}</p>;\n        }\n    }\n\n    const onChange = (value) => {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n\n        if (typeof value === 'object') {\n            setStringValue(value.join(','));\n        } else {\n            setStringValue('');\n        }\n    }\n\n    const value = props.value ? props.value : [];\n \n    return (\n        <Fragment>\n            <FormTokenField\n                label={props.label}\n                value={value}\n                suggestions={props.options}\n                onChange={onChange}\n                maxSuggestions={props.maxSuggestions}\n                className=\"publishpres-future-token-field\"\n                __experimentalExpandOnFocus={props.expandOnFocus}\n                __experimentalAutoSelectFirstMatch={props.autoSelectFirstMatch}\n            />\n            <input type=\"hidden\" name={props.name} value={stringValue} />\n\n            {description}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TrueFalseControl = function (props) {\n    const { Fragment } = wp.element;\n\n    const onChange = (e) => {\n        if (props.onChange) {\n            props.onChange(\n                e.target.value === props.trueValue && jQuery(e.target).is(':checked')\n            );\n            // Check only the true radio... using the field name? or directly the ID\n        }\n    };\n\n    return (\n        <Fragment>\n            <input\n                type=\"radio\"\n                name={props.name}\n                id={props.name + '-true'}\n                value={props.trueValue}\n                defaultChecked={props.selected}\n                onChange={onChange}\n            />\n\n            <label htmlFor={props.name + '-true'}>{props.trueLabel}</label>\n            &nbsp;&nbsp;\n            <input\n                type=\"radio\"\n                name={props.name}\n                defaultChecked={!props.selected}\n                id={props.name + '-false'}\n                value={props.falseValue}\n                onChange={onChange}\n            />\n            <label\n                htmlFor={props.name + '-false'}>{props.falseLabel}</label>\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","export { ButtonsPanel } from \"./ButtonsPanel\";\nexport { FutureActionPanel } from \"./FutureActionPanel\";\nexport { FutureActionPanelBlockEditor } from \"./FutureActionPanelBlockEditor\";\nexport { FutureActionPanelClassicEditor } from \"./FutureActionPanelClassicEditor\";\nexport { FutureActionPanelQuickEdit } from \"./FutureActionPanelQuickEdit\";\nexport { FutureActionPanelBulkEdit } from \"./FutureActionPanelBulkEdit\";\nexport { PostTypeSettingsPanel } from \"./PostTypeSettingsPanel\";\nexport { PostTypesSettingsPanels } from \"./PostTypesSettingsPanels\";\nexport { SettingRow } from \"./SettingRow\";\nexport { SettingsFieldset } from \"./SettingsFieldset\";\nexport { SettingsForm } from \"./SettingsForm\";\nexport { SettingsSection } from \"./SettingsSection\";\nexport { SettingsTable } from \"./SettingsTable\";\nexport { SubmitButton } from \"./SubmitButton\";\nexport { CheckboxControl } from \"./CheckboxControl\";\nexport { SelectControl } from \"./SelectControl\";\nexport { TextControl } from \"./TextControl\";\nexport { TokensControl } from \"./TokensControl\";\nexport { NonceControl } from \"./NonceControl\";\nexport { TrueFalseControl } from \"./TrueFalseControl\";\nexport { Spinner } from \"./Spinner\";\n","import { formatUnixTimeToTimestamp, getCurrentTimeAsTimestamp, normalizeUnixTimeToSeconds } from './time';\nimport { isNumber } from './utils';\nimport { register, createReduxStore } from '&wp.data';\n\nexport const createStore = (props) => {\n    if (props.defaultState.terms && typeof props.defaultState.terms === 'string') {\n        props.defaultState.terms = props.defaultState.terms.split(',').map(term => parseInt(term));\n    }\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? props.defaultState.date : getCurrentTimeAsTimestamp(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        newStatus: props.defaultState.newStatus ? props.defaultState.newStatus : 'draft',\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n        changeAction: 'no-change',\n        calendarIsVisible: true,\n        hasValidData: true,\n    }\n\n    const store = createReduxStore(props.name, {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_NEW_STATUS':\n                    return {\n                        ...state,\n                        newStatus: action.newStatus,\n                    };\n                case 'SET_DATE':\n                    // Make sure the date is a number, if it is a string with only numbers\n                    if (typeof action.date !== 'number' && isNumber(action.date)) {\n                        action.date = parseInt(action.date);\n                    }\n\n                    // If string, convert to unix time\n                    if (typeof action.date === 'string') {\n                        action.date = new Date(action.date).getTime();\n                    }\n\n                    // Make sure the time is always in seconds\n                    action.date = normalizeUnixTimeToSeconds(action.date);\n\n                    // Convert to formated string format, considering it is in the site's timezone\n                    action.date = formatUnixTimeToTimestamp(action.date);\n\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n                case 'SET_CHANGE_ACTION':\n                    return {\n                        ...state,\n                        changeAction: action.changeAction,\n                    }\n                case 'SET_CALENDAR_IS_VISIBLE':\n                    return {\n                        ...state,\n                        calendarIsVisible: action.calendarIsVisible,\n                    }\n                case 'SET_HAS_VALID_DATA':\n                    return {\n                        ...state,\n                        hasValidData: action.hasValidData,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setNewStatus(newStatus) {\n                return {\n                    type: 'SET_NEW_STATUS',\n                    newStatus: newStatus\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            },\n            setChangeAction(changeAction) {\n                return {\n                    type: 'SET_CHANGE_ACTION',\n                    changeAction: changeAction\n                }\n            },\n            setCalendarIsVisible(calendarIsVisible) {\n                return {\n                    type: 'SET_CALENDAR_IS_VISIBLE',\n                    calendarIsVisible: calendarIsVisible\n                }\n            },\n            setHasValidData(hasValidData) {\n                return {\n                    type: 'SET_HAS_VALID_DATA',\n                    hasValidData: hasValidData\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getNewStatus(state) {\n                return state.newStatus;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            },\n            getChangeAction(state) {\n                return state.changeAction;\n            },\n            getCalendarIsVisible(state) {\n                return state.calendarIsVisible;\n            },\n            getHasValidData(state) {\n                return state.hasValidData;\n            },\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTimeInSeconds = () => {\n    return normalizeUnixTimeToSeconds(new Date().getTime());\n}\n\nexport const getCurrentTimeAsTimestamp = () => {\n    return formatUnixTimeToTimestamp(getCurrentTimeInSeconds());\n}\n\nexport const formatUnixTimeToTimestamp = (unixTimestamp) => {\n    const date = new Date(\n        normalizeUnixTimeToSeconds(unixTimestamp)\n    );\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimestampToUnixTime = (time) => {\n    const date = new Date(time);\n\n    return normalizeUnixTimeToSeconds(date.getTime());\n}\n\nexport const timeIsInSeconds = (time) => {\n    return parseInt(time).toString().length <= 10;\n}\n\nexport const normalizeUnixTimeToSeconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time : time / 1000;\n}\n\nexport const normalizeUnixTimeToMilliseconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time * 1000 : time;\n}\n","export const compact = (array) => {\n    if (!array) {\n        return [];\n    }\n\n    if (! Array.isArray(array) && typeof array === 'object') {\n        array = Object.values(array);\n    }\n\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n\nexport const isGutenbergEnabled = () => {\n    return document.body.classList.contains('block-editor-page');\n}\n\nexport const getElementByName = (name) => {\n    return document.getElementsByName(name)[0];\n}\n\nexport const getFieldByName = (name, postId) => {\n    return document.querySelector(`#the-list tr#post-${postId} .column-expirationdate input#future_action_${name}-${postId}`);\n}\n\nexport const getFieldValueByName = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return null;\n    }\n\n    return field.value;\n};\n\nexport const getFieldValueByNameAsArrayOfInt = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field || !field.value) {\n        return [];\n    }\n\n    if (typeof field.value === 'number') {\n        field.value = field.value.toString();\n    }\n\n    return field.value.split(',').map(term => parseInt(term));\n};\n\nexport const getFieldValueByNameAsBool = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return false;\n    }\n\n    return field.value === '1' || field.value === 'true';\n}\n\nexport const getActionSettingsFromColumnData = (postId) => {\n    const columnData = document.querySelector(`#post-expire-column-${postId}`);\n\n    return {\n        enabled: columnData.dataset.actionEnabled === '1',\n        action: columnData.dataset.actionType,\n        date: columnData.dataset.actionDate,\n        dateUnix: columnData.dataset.actionDateUnix,\n        taxonomy: columnData.dataset.actionTaxonomy,\n        terms: columnData.dataset.actionTerms,\n        newStatus: columnData.dataset.actionNewStatus,\n    };\n}\n\n/**\n * This function is used to determine if a value is a number, including strings.\n *\n * @param {*} value\n * @returns\n */\nexport const isNumber = (value) => {\n    return !isNaN(value);\n}\n","module.exports = ReactDOM;","module.exports = publishpressFutureClassicEditorConfig;","module.exports = wp;","module.exports = wp.components;","module.exports = wp.data;","module.exports = wp.element;","module.exports = wp.hooks;","module.exports = wp.url;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FutureActionPanelClassicEditor } from './components';\nimport { createStore } from './data';\nimport { isGutenbergEnabled } from './utils';\nimport { createRoot } from '&wp.element';\nimport { select } from '&wp.data';\nimport {\n    postType,\n    isNewPost,\n    actionsSelectOptions,\n    is12Hour,\n    timeFormat,\n    startOfWeek,\n    strings,\n    taxonomyName,\n    postTypeDefaultConfig,\n    defaultDate,\n    statusesSelectOptions\n} from \"&config.classic-editor\";\nimport { render } from \"&ReactDOM\";\n\nif (! isGutenbergEnabled()) {\n    const storeName = 'publishpress-future/future-action';\n\n    if (!select(storeName)) {\n        createStore({\n            name: storeName,\n            defaultState: {\n                autoEnable: postTypeDefaultConfig.autoEnable,\n                action: postTypeDefaultConfig.expireType,\n                newStatus: postTypeDefaultConfig.newStatus,\n                date: defaultDate,\n                taxonomy: postTypeDefaultConfig.taxonomy,\n                terms: postTypeDefaultConfig.terms,\n            }\n        });\n    }\n\n    const container = document.getElementById(\"publishpress-future-classic-editor\");\n    const component = (\n        <FutureActionPanelClassicEditor\n            storeName={storeName}\n            postType={postType}\n            isNewPost={isNewPost}\n            actionsSelectOptions={actionsSelectOptions}\n            statusesSelectOptions={statusesSelectOptions}\n            is12Hour={is12Hour}\n            timeFormat={timeFormat}\n            startOfWeek={startOfWeek}\n            strings={strings}\n            taxonomyName={taxonomyName}\n        />\n    );\n\n    createRoot(container).render(component);\n}\n"],"names":["ButtonsPanel","props","children","CheckboxControl","description","useState","checked","setChecked","unescapedDescription","className","dangerouslySetInnerHTML","__html","Fragment","label","name","id","onChange","value","DateTimePicker","currentDate","is12Hour","startOfWeek","normalizeUnixTimeToMilliseconds","__nextRemoveHelpButton","wp","components","PanelRow","SelectControl","FormTokenField","Spinner","BaseControl","element","useEffect","decodeEntities","htmlEntities","addQueryArgs","url","data","useSelect","useDispatch","apiFetch","FutureActionPanel","action","select","storeName","getAction","date","getDate","enabled","getEnabled","terms","getTerms","taxonomy","getTaxonomy","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","calendarIsVisible","getCalendarIsVisible","hasValidData","getHasValidData","newStatus","getNewStatus","validationError","setValidationError","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","setCalendarIsVisible","setHasValidData","setNewStatus","insertTerm","term","count","link","slug","callOnChangeData","attribute","onChangeData","handleEnabledChange","isChecked","fetchTerms","path","then","result","forEach","getCalendarIsVisibleFromStorage","localStorage","getItem","context","autoEnableAndHideCheckbox","isCleanNewPost","setItem","onDataIsValid","onDataIsInvalid","selectedTerms","length","compact","map","mapTermsListById","termsListByNameKeys","Object","keys","is24hour","panelClass","contentPanelClass","datePanelClass","timeFormat","actionsSelectOptions","filter","item","indexOf","HelpText","string","href","target","parts","split","push","shift","before","after","key","replaceCurlyBracketsWithLink","strings","timezoneSettingsHelp","displayTaxonomyField","String","includes","termsFieldLabel","newTerms","replace","removeTerms","addTerms","valid","errorActionRequired","errorDateRequired","Date","errorDateInPast","isTermRequired","noTermIsSelected","errorTermsRequired","validateData","type","enablePostExpiration","options","statusesSelectOptions","loading","noTaxonomyFound","noTermsFound","suggestions","mapTermsListByName","placeholder","addTermsPlaceholder","maxSuggestions","onFocus","e","jQuery","addClass","__experimentalExpandOnFocus","__experimentalAutoSelectFirstMatch","ToggleCalendarDatePicker","onChangeDate","onToggleCalendar","isExpanded","FutureActionPanelBlockEditor","PluginDocumentSettingPanel","editPost","getEditedPostAttribute","lockPostSaving","unlockPostSaving","title","panelTitle","icon","initialOpen","postTypeDefaultConfig","autoEnable","postType","store","newAttribute","publishpress_future_action","entries","editPostAttribute","FutureActionPanelBulkEdit","changeAction","getChangeAction","setChangeAction","termsString","join","noChange","changeAdd","addOnly","changeOnly","removeOnly","prop","futureActionUpdate","isNewPost","getElementByName","nonce","FutureActionPanelClassicEditor","getTimezoneOffset","document","getElementsByName","getElementValueByName","parseInt","getTermsFromElementByName","FutureActionPanelQuickEdit","NonceControl","referrer","apiRequestController","PostTypeSettingsPanel","originalExpireTypeList","expireTypeList","settings","postTypeTaxonomy","setPostTypeTaxonomy","termOptions","setTermOptions","termsSelectIsLoading","setTermsSelectIsLoading","setSelectedTerms","howToExpire","settingHowToExpire","setSettingHowToExpire","active","isActive","setIsActive","defaultExpireOffset","expireOffset","setExpireOffset","emailNotification","setEmailNotification","autoEnabled","isAutoEnabled","setIsAutoEnabled","taxonomyLabel","setTaxonomyLabel","howToExpireList","setHowToExpireList","hasPendingValidation","setHasPendingValidation","offsetPreview","setOffsetPreview","taxonomyRelatedActions","newExpireTypeList","taxonomiesList","settingsTermsOptions","option","abort","signal","AbortController","undefined","method","offset","isValid","message","preview","expireType","toLowerCase","onValidationStarted","onValidationFinished","termOptionsLabels","settingsRows","SettingRow","text","fieldActive","fieldActiveLabel","fieldAutoEnable","fieldAutoEnableLabel","fieldTaxonomy","selected","noItemFoundMessage","noItemsfound","fieldTaxonomyDescription","fieldHowToExpire","fieldHowToExpireDescription","statusesList","TokensControl","fieldTerm","isLoading","fieldTermDescription","expandOnFocus","autoSelectFirstMatch","fieldDefaultDateTimeOffset","TextControl","globalDefaultExpireOffset","fieldDefaultDateTimeOffsetDescription","datePreview","fieldWhoToNotify","fieldWhoToNotifyDescription","applyFilters","SettingsFieldset","legend","SettingsTable","bodyChildren","PostTypesSettingsPanels","panels","postTypeSettings","valign","scope","htmlFor","SettingsForm","SettingsSection","SubmitButton","disabled","ToggleArrowButton","iconExpanded","iconCollapsed","titleExpanded","titleCollapsed","Button","isSmall","onClick","toggleButtonElement","querySelector","dateTimeElement","nextElementSibling","timeElement","dateElement","nextSibling","insertBefore","hideCalendar","showCalendar","stringValue","setStringValue","TrueFalseControl","trueValue","is","defaultChecked","trueLabel","falseValue","falseLabel","createStore","defaultState","getCurrentTimeAsTimestamp","createReduxStore","reducer","state","isNumber","getTime","normalizeUnixTimeToSeconds","formatUnixTimeToTimestamp","actions","selectors","register","getCurrentTimeInSeconds","unixTimestamp","getFullYear","getMonth","slice","getHours","getMinutes","getSeconds","timeIsInSeconds","formatTimestampToUnixTime","time","toString","getFieldByName","array","Array","isArray","values","debugLogFactory","config","console","isDebugEnabled","debug","isGutenbergEnabled","body","classList","contains","postId","getFieldValueByName","field","getFieldValueByNameAsArrayOfInt","getFieldValueByNameAsBool","getActionSettingsFromColumnData","columnData","dataset","actionEnabled","actionType","actionDate","dateUnix","actionDateUnix","actionTaxonomy","actionTerms","actionNewStatus","isNaN","module","exports","ReactDOM","publishpressFutureClassicEditorConfig","hooks","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","defaultDate","container","getElementById","component","createRoot","render"],"sourceRoot":""}